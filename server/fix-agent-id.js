/**
 * Script pour v√©rifier et ajouter la colonne agent_id √† la table users
 */

const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const path = require('path');

async function fixAgentIdColumn() {
  console.log('üîß V√©rification et correction de la colonne agent_id...');
  
  try {
    // Ouvrir la base de donn√©es
    const db = await open({
      filename: path.join(__dirname, 'database/fusepoint.db'),
      driver: sqlite3.Database
    });
    
    console.log('‚úÖ Base de donn√©es ouverte');
    
    // V√©rifier la structure actuelle de la table users
    const tableInfo = await db.all('PRAGMA table_info(users)');
    console.log('üìã Structure actuelle de la table users:');
    tableInfo.forEach(col => {
      console.log(`  - ${col.name}: ${col.type}`);
    });
    
    // V√©rifier si la colonne agent_id existe
    const hasAgentId = tableInfo.some(col => col.name === 'agent_id');
    
    if (!hasAgentId) {
      console.log('‚ö†Ô∏è Colonne agent_id manquante, ajout en cours...');
      await db.run('ALTER TABLE users ADD COLUMN agent_id INTEGER');
      await db.run('CREATE INDEX IF NOT EXISTS idx_users_agent_id ON users(agent_id)');
      console.log('‚úÖ Colonne agent_id ajout√©e avec succ√®s');
    } else {
      console.log('‚úÖ Colonne agent_id existe d√©j√†');
    }
    
    // V√©rifier la nouvelle structure
    const newTableInfo = await db.all('PRAGMA table_info(users)');
    console.log('\nüìã Structure finale de la table users:');
    newTableInfo.forEach(col => {
      console.log(`  - ${col.name}: ${col.type}`);
    });
    
    await db.close();
    console.log('\nüéâ V√©rification termin√©e avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

// Ex√©cuter la v√©rification
fixAgentIdColumn();
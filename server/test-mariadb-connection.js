#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// Charger la configuration depuis .env.mariadb
const envPath = path.join(__dirname, '.env.mariadb');
const envContent = fs.readFileSync(envPath, 'utf8');

const config = {};
envContent.split('\n').forEach(line => {
    if (line.trim() && !line.startsWith('#')) {
        const [key, value] = line.split('=');
        if (key && value) {
            config[key.trim()] = value.trim();
        }
    }
});

async function testConnection() {
    console.log('üîç Test de connexion MariaDB...');
    console.log('üìã Configuration:');
    console.log(`   Host: ${config.MARIADB_HOST}`);
    console.log(`   Port: ${config.MARIADB_PORT}`);
    console.log(`   User: ${config.MARIADB_USER}`);
    console.log(`   Database: ${config.MARIADB_DATABASE}`);
    console.log(`   Password: ${config.MARIADB_PASSWORD ? '***' + config.MARIADB_PASSWORD.slice(-3) : 'VIDE'}`);
    console.log('');

    let connection;
    try {
        // Test de connexion sans base de donn√©es sp√©cifique
        console.log('üîå Test de connexion au serveur...');
        connection = await mysql.createConnection({
            host: config.MARIADB_HOST,
            port: parseInt(config.MARIADB_PORT),
            user: config.MARIADB_USER,
            password: config.MARIADB_PASSWORD
        });

        console.log('‚úÖ Connexion au serveur r√©ussie!');

        // V√©rifier si la base de donn√©es existe
        console.log('üóÑÔ∏è  V√©rification de la base de donn√©es...');
        const [databases] = await connection.execute(`SHOW DATABASES LIKE '${config.MARIADB_DATABASE}'`);
        
        if (databases.length === 0) {
            console.log('‚ö†Ô∏è  Base de donn√©es non trouv√©e. Cr√©ation...');
            await connection.execute(`CREATE DATABASE ${config.MARIADB_DATABASE} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);
            console.log('‚úÖ Base de donn√©es cr√©√©e avec succ√®s!');
        } else {
            console.log('‚úÖ Base de donn√©es trouv√©e!');
        }

        // Fermer la connexion et se reconnecter avec la base de donn√©es
        await connection.end();
        
        console.log('üîå Test de connexion √† la base de donn√©es...');
        connection = await mysql.createConnection({
            host: config.MARIADB_HOST,
            port: parseInt(config.MARIADB_PORT),
            user: config.MARIADB_USER,
            password: config.MARIADB_PASSWORD,
            database: config.MARIADB_DATABASE
        });

        // Test simple
        const [result] = await connection.execute('SELECT 1 as test, NOW() as current_datetime');
        console.log('‚úÖ Test de requ√™te r√©ussi:', result[0]);

        await connection.end();
        console.log('');
        console.log('üéâ Tous les tests sont pass√©s avec succ√®s!');
        console.log('üìù Vous pouvez maintenant ex√©cuter la migration:');
        console.log('   cd server && node migrate-database.js');
        
    } catch (error) {
        console.error('‚ùå Erreur de connexion:', error.message);
        console.log('');
        console.log('üîß Solutions possibles:');
        console.log('1. V√©rifiez que MariaDB est d√©marr√©: brew services start mariadb');
        console.log('2. V√©rifiez le mot de passe dans .env.mariadb');
        console.log('3. Essayez de vous connecter manuellement:');
        console.log(`   mariadb -u ${config.MARIADB_USER} -p${config.MARIADB_PASSWORD} -h ${config.MARIADB_HOST}`);
        
        if (connection) {
            try {
                await connection.end();
            } catch (closeError) {
                // Ignorer les erreurs de fermeture
            }
        }
        process.exit(1);
    }
}

testConnection();
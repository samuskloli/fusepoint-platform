const axios = require('axios');
const databaseService = require('./services/databaseService');

const BASE_URL = 'http://localhost:3000';

// Donn√©es de test
const CLIENT_EMAIL = 'samuskl@gmail.com';
const CLIENT_PASSWORD = 'password';
const AGENT_EMAIL = 'info@fusepoint.ch';
const AGENT_PASSWORD = 'password';
const PROJECT_ID = 1;

/**
 * Authentifier un utilisateur et r√©cup√©rer son token
 */
async function authenticateUser(email, password) {
  try {
    console.log(`üîê Authentification de ${email}...`);
    const response = await axios.post(`${BASE_URL}/api/auth/login`, {
      email,
      password
    });
    
    // V√©rifier diff√©rents formats de r√©ponse
    let token = null;
    if (response.data.success) {
      // Nouveau format avec tokens.accessToken
      if (response.data.tokens && response.data.tokens.accessToken) {
        token = response.data.tokens.accessToken;
      }
      // Ancien format avec token direct
      else if (response.data.token) {
        token = response.data.token;
      }
    }
    
    if (token) {
      console.log(`‚úÖ ${email} authentifi√© avec succ√®s`);
      return token;
    } else {
      console.log(`‚ùå √âchec d'authentification pour ${email} - token non trouv√©:`, response.data);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Erreur d'authentification pour ${email}:`, error.response?.data || error.message);
    return null;
  }
}

/**
 * R√©cup√©rer le dashboard d'un projet
 */
async function getDashboard(token, userLabel) {
  try {
    console.log(`üìä R√©cup√©ration du dashboard pour ${userLabel}...`);
    const response = await axios.get(`${BASE_URL}/api/projects/${PROJECT_ID}/dashboard`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.data.success) {
      console.log(`‚úÖ Dashboard r√©cup√©r√© pour ${userLabel}`);
      console.log(`   - Version: ${response.data.data.version}`);
      console.log(`   - Derni√®re mise √† jour: ${response.data.data.updatedAt}`);
      console.log(`   - Mis √† jour par: ${response.data.data.updatedBy}`);
      console.log(`   - Permissions d'√©dition: ${response.data.data.permissions?.canEdit}`);
      return response.data.data;
    } else {
      console.log(`‚ùå √âchec de r√©cup√©ration du dashboard pour ${userLabel}:`, response.data);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Erreur de r√©cup√©ration du dashboard pour ${userLabel}:`, error.response?.data || error.message);
    return null;
  }
}

/**
 * Mettre √† jour le dashboard (agent uniquement)
 */
async function updateDashboard(token, userLabel, newLayout) {
  try {
    console.log(`üìù Mise √† jour du dashboard par ${userLabel}...`);
    const response = await axios.put(`${BASE_URL}/api/projects/${PROJECT_ID}/dashboard`, {
      layout: newLayout,
      version: 1 // Version de test
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (response.data.success) {
      console.log(`‚úÖ Dashboard mis √† jour par ${userLabel}`);
      console.log(`   - Nouvelle version: ${response.data.data.version}`);
      return response.data.data;
    } else {
      console.log(`‚ùå √âchec de mise √† jour du dashboard par ${userLabel}:`, response.data);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Erreur de mise √† jour du dashboard par ${userLabel}:`, error.response?.data || error.message);
    return null;
  }
}

/**
 * V√©rifier directement en base de donn√©es
 */
async function checkDatabaseDashboard() {
  try {
    console.log(`üóÑÔ∏è V√©rification directe en base de donn√©es...`);
    const dashboard = await databaseService.get(
      'SELECT project_id, layout_json, version, updated_at, updated_by FROM project_dashboards WHERE project_id = ?',
      [PROJECT_ID]
    );
    
    if (dashboard) {
      console.log(`‚úÖ Dashboard trouv√© en base:`);
      console.log(`   - Projet ID: ${dashboard.project_id}`);
      console.log(`   - Version: ${dashboard.version}`);
      console.log(`   - Derni√®re mise √† jour: ${dashboard.updated_at}`);
      console.log(`   - Mis √† jour par: ${dashboard.updated_by}`);
      console.log(`   - Layout (100 premiers caract√®res): ${JSON.stringify(dashboard.layout_json).substring(0, 100)}...`);
      return dashboard;
    } else {
      console.log(`‚ùå Aucun dashboard trouv√© en base pour le projet ${PROJECT_ID}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Erreur de v√©rification en base:`, error.message);
    return null;
  }
}

/**
 * Test principal
 */
async function testDashboardSync() {
  try {
    console.log('üß™ Test de synchronisation des dashboards agent/client\n');

    // 1. Authentifier les utilisateurs
    console.log('=== √âTAPE 1: AUTHENTIFICATION ===');
    const clientToken = await authenticateUser(CLIENT_EMAIL, CLIENT_PASSWORD);
    const agentToken = await authenticateUser(AGENT_EMAIL, AGENT_PASSWORD);
    
    if (!clientToken || !agentToken) {
      console.log('‚ùå Impossible de continuer sans authentification');
      return;
    }

    // 2. R√©cup√©rer les dashboards initiaux
    console.log('\n=== √âTAPE 2: DASHBOARDS INITIAUX ===');
    const clientDashboardInitial = await getDashboard(clientToken, 'CLIENT');
    const agentDashboardInitial = await getDashboard(agentToken, 'AGENT');
    const dbDashboardInitial = await checkDatabaseDashboard();

    // 3. Comparer les versions initiales
    console.log('\n=== √âTAPE 3: COMPARAISON INITIALE ===');
    if (clientDashboardInitial && agentDashboardInitial) {
      const sameVersion = clientDashboardInitial.version === agentDashboardInitial.version;
      console.log(`üîç Versions identiques: ${sameVersion ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Client: ${clientDashboardInitial.version}`);
      console.log(`   - Agent: ${agentDashboardInitial.version}`);
      console.log(`   - Base: ${dbDashboardInitial?.version}`);
    }

    // 4. Modifier le dashboard c√¥t√© agent
    console.log('\n=== √âTAPE 4: MODIFICATION PAR L\'AGENT ===');
    const newLayout = {
      dashboard: { theme: 'dark', autoSave: true },
      layout: { columns: 12, gap: 16 },
      widgetsLayout: {
        widget1: { width: 6, height: 4, position_x: 0, position_y: 0 },
        widget2: { width: 6, height: 4, position_x: 6, position_y: 0 }
      },
      timestamp: new Date().toISOString()
    };
    
    const updatedDashboard = await updateDashboard(agentToken, 'AGENT', newLayout);

    // 5. V√©rifier la synchronisation
    console.log('\n=== √âTAPE 5: V√âRIFICATION APR√àS MODIFICATION ===');
    const clientDashboardAfter = await getDashboard(clientToken, 'CLIENT');
    const agentDashboardAfter = await getDashboard(agentToken, 'AGENT');
    const dbDashboardAfter = await checkDatabaseDashboard();

    // 6. Analyser les r√©sultats
    console.log('\n=== √âTAPE 6: ANALYSE DES R√âSULTATS ===');
    if (clientDashboardAfter && agentDashboardAfter && dbDashboardAfter) {
      const clientVersion = clientDashboardAfter.version;
      const agentVersion = agentDashboardAfter.version;
      const dbVersion = dbDashboardAfter.version;
      
      console.log(`üîç Versions apr√®s modification:`);
      console.log(`   - Client: ${clientVersion}`);
      console.log(`   - Agent: ${agentVersion}`);
      console.log(`   - Base: ${dbVersion}`);
      
      const allSynced = clientVersion === agentVersion && agentVersion === dbVersion;
      console.log(`\nüéØ Synchronisation: ${allSynced ? '‚úÖ R√âUSSIE' : '‚ùå √âCHOU√âE'}`);
      
      if (!allSynced) {
        console.log('\nüîç DIAGNOSTIC DU PROBL√àME:');
        if (clientVersion !== agentVersion) {
          console.log('   ‚ùå Le client ne voit pas les modifications de l\'agent');
        }
        if (agentVersion !== dbVersion) {
          console.log('   ‚ùå L\'agent ne voit pas les donn√©es de la base');
        }
        if (clientVersion !== dbVersion) {
          console.log('   ‚ùå Le client ne voit pas les donn√©es de la base');
        }
      }
    }

    console.log('\n‚úÖ Test termin√©');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    try {
      await databaseService.close();
    } catch (e) {
      // Ignorer les erreurs de fermeture
    }
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testDashboardSync();
}

module.exports = { testDashboardSync };
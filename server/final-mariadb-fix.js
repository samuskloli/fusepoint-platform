#!/usr/bin/env node

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

const PASSWORD = 'FusepointDB2025!';
const USERNAME = 'oliveirasamuel';
const DATABASE = 'fusepoint_db';

async function finalFix() {
    console.log('üîß Correction finale de MariaDB...');
    console.log('');

    try {
        // 1. Tester la connexion actuelle
        console.log('üß™ Test de la connexion actuelle...');
        try {
            await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -e "SELECT 1;"`);
            console.log('‚úÖ La connexion fonctionne d√©j√†!');
            return;
        } catch (error) {
            console.log('‚ùå Connexion √©chou√©e, correction n√©cessaire');
        }

        // 2. Essayer de se connecter en tant que root sans mot de passe
        console.log('üîë Tentative de connexion root...');
        try {
            await execAsync('mariadb -u root -e "SELECT 1;"');
            console.log('‚úÖ Connexion root sans mot de passe r√©ussie');
            
            // Cr√©er l'utilisateur
            console.log('üë§ Cr√©ation de l\'utilisateur...');
            const commands = [
                `DROP USER IF EXISTS '${USERNAME}'@'localhost';`,
                `CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}';`,
                `GRANT ALL PRIVILEGES ON *.* TO '${USERNAME}'@'localhost' WITH GRANT OPTION;`,
                `CREATE DATABASE IF NOT EXISTS ${DATABASE} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`,
                `GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'localhost';`,
                'FLUSH PRIVILEGES;'
            ];

            for (const command of commands) {
                console.log(`   üìù ${command}`);
                await execAsync(`mariadb -u root -e "${command}"`);
            }
            
        } catch (rootError) {
            console.log('‚ùå Connexion root √©chou√©e');
            
            // 3. Essayer avec un mot de passe root vide explicite
            console.log('üîë Tentative avec mot de passe root vide...');
            try {
                await execAsync('mariadb -u root -p"" -e "SELECT 1;"');
                console.log('‚úÖ Connexion root avec mot de passe vide r√©ussie');
                
                // Cr√©er l'utilisateur
                console.log('üë§ Cr√©ation de l\'utilisateur...');
                const commands = [
                    `DROP USER IF EXISTS '${USERNAME}'@'localhost';`,
                    `CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}';`,
                    `GRANT ALL PRIVILEGES ON *.* TO '${USERNAME}'@'localhost' WITH GRANT OPTION;`,
                    `CREATE DATABASE IF NOT EXISTS ${DATABASE} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`,
                    `GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'localhost';`,
                    'FLUSH PRIVILEGES;'
                ];

                for (const command of commands) {
                    console.log(`   üìù ${command}`);
                    await execAsync(`mariadb -u root -p"" -e "${command}"`);
                }
                
            } catch (emptyPassError) {
                console.log('‚ùå Toutes les tentatives de connexion root ont √©chou√©');
                
                // 4. Derni√®re tentative : r√©initialisation compl√®te
                console.log('üîÑ R√©initialisation compl√®te...');
                
                try {
                    // Arr√™ter MariaDB
                    await execAsync('brew services stop mariadb');
                    console.log('‚úÖ MariaDB arr√™t√©');
                    
                    // Supprimer les donn√©es
                    try {
                        await execAsync('rm -rf /opt/homebrew/var/mysql');
                        console.log('‚úÖ Donn√©es supprim√©es');
                    } catch (rmError) {
                        console.log('‚ö†Ô∏è  Impossible de supprimer les donn√©es');
                    }
                    
                    // R√©installer
                    try {
                        await execAsync('brew reinstall mariadb');
                        console.log('‚úÖ MariaDB r√©install√©');
                    } catch (reinstallError) {
                        await execAsync('brew install mariadb');
                        console.log('‚úÖ MariaDB install√©');
                    }
                    
                    // Red√©marrer
                    await execAsync('brew services start mariadb');
                    console.log('‚úÖ MariaDB red√©marr√©');
                    
                    // Attendre
                    console.log('‚è≥ Attente du d√©marrage...');
                    await new Promise(resolve => setTimeout(resolve, 10000));
                    
                    // Cr√©er l'utilisateur sur l'installation fra√Æche
                    console.log('üë§ Cr√©ation de l\'utilisateur sur installation fra√Æche...');
                    const commands = [
                        `CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}';`,
                        `GRANT ALL PRIVILEGES ON *.* TO '${USERNAME}'@'localhost' WITH GRANT OPTION;`,
                        `CREATE DATABASE ${DATABASE} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`,
                        `GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'localhost';`,
                        'FLUSH PRIVILEGES;'
                    ];

                    for (const command of commands) {
                        console.log(`   üìù ${command}`);
                        await execAsync(`mariadb -u root -e "${command}"`);
                    }
                    
                } catch (resetError) {
                    throw new Error(`R√©initialisation √©chou√©e: ${resetError.message}`);
                }
            }
        }

        // 5. Test final
        console.log('üß™ Test final de la connexion...');
        await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -e "SELECT 1 as test, '${DATABASE}' as database_name;"`);
        console.log('‚úÖ Test final r√©ussi!');
        
        console.log('');
        console.log('üéâ MariaDB configur√© avec succ√®s!');
        console.log('üìã Informations de connexion:');
        console.log(`   Utilisateur: ${USERNAME}`);
        console.log(`   Mot de passe: ${PASSWORD}`);
        console.log(`   Base de donn√©es: ${DATABASE}`);
        console.log(`   Host: localhost`);
        console.log(`   Port: 3306`);
        console.log('');
        console.log('üìù Prochaines √©tapes:');
        console.log('   1. Tester: node test-mariadb-connection.js');
        console.log('   2. Migrer: node migrate-database.js');
        
    } catch (error) {
        console.error('‚ùå Erreur finale:', error.message);
        console.log('');
        console.log('üÜò Solution manuelle requise:');
        console.log('1. Ex√©cuter: brew services stop mariadb');
        console.log('2. Ex√©cuter: sudo rm -rf /opt/homebrew/var/mysql');
        console.log('3. Ex√©cuter: brew uninstall mariadb');
        console.log('4. Ex√©cuter: brew install mariadb');
        console.log('5. Ex√©cuter: brew services start mariadb');
        console.log('6. Attendre 10 secondes');
        console.log(`7. Ex√©cuter: mariadb -u root -e "CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}'; GRANT ALL PRIVILEGES ON *.* TO '${USERNAME}'@'localhost'; CREATE DATABASE ${DATABASE}; FLUSH PRIVILEGES;"`);
        process.exit(1);
    }
}

finalFix();
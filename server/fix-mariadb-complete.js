#!/usr/bin/env node

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const util = require('util');
const execAsync = util.promisify(exec);

const PASSWORD = 'FusepointDB2025!';
const USERNAME = 'oliveirasamuel';
const DATABASE = 'fusepoint_db';

async function fixMariaDBComplete() {
    console.log('üîß R√©paration compl√®te de MariaDB...');
    console.log('');

    try {
        // 1. Arr√™ter MariaDB
        console.log('‚èπÔ∏è  Arr√™t de MariaDB...');
        try {
            await execAsync('brew services stop mariadb');
            console.log('‚úÖ MariaDB arr√™t√©');
        } catch (error) {
            console.log('‚ö†Ô∏è  MariaDB √©tait d√©j√† arr√™t√©');
        }

        // 2. Supprimer les donn√©es existantes
        console.log('üóëÔ∏è  Suppression des donn√©es MariaDB existantes...');
        const dataDir = '/opt/homebrew/var/mysql';
        try {
            await execAsync(`rm -rf ${dataDir}`);
            console.log('‚úÖ Donn√©es supprim√©es');
        } catch (error) {
            console.log('‚ö†Ô∏è  Impossible de supprimer les donn√©es:', error.message);
        }

        // 3. R√©installer MariaDB
        console.log('üì¶ R√©installation de MariaDB...');
        try {
            await execAsync('brew uninstall mariadb');
            console.log('‚úÖ MariaDB d√©sinstall√©');
        } catch (error) {
            console.log('‚ö†Ô∏è  MariaDB n\'√©tait pas install√© ou erreur:', error.message);
        }

        console.log('üì• Installation de MariaDB...');
        await execAsync('brew install mariadb');
        console.log('‚úÖ MariaDB install√©');

        // 4. D√©marrer MariaDB
        console.log('üöÄ D√©marrage de MariaDB...');
        await execAsync('brew services start mariadb');
        console.log('‚úÖ MariaDB d√©marr√©');

        // Attendre que le serveur soit pr√™t
        console.log('‚è≥ Attente du d√©marrage complet...');
        await new Promise(resolve => setTimeout(resolve, 10000));

        // 5. Configurer l'utilisateur (MariaDB fra√Æchement install√© n'a pas de mot de passe root)
        console.log('üë§ Configuration de l\'utilisateur...');
        const commands = [
            `CREATE USER '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}';`,
            `GRANT ALL PRIVILEGES ON *.* TO '${USERNAME}'@'localhost' WITH GRANT OPTION;`,
            `CREATE DATABASE ${DATABASE} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`,
            `GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'localhost';`,
            'FLUSH PRIVILEGES;'
        ];

        for (const command of commands) {
            console.log(`   üìù ${command}`);
            try {
                await execAsync(`mariadb -u root -e "${command}"`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Erreur avec la commande: ${error.message}`);
                // Continuer avec les autres commandes
            }
        }

        // 6. Tester la connexion
        console.log('üß™ Test de la connexion...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
            await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -e "SELECT 1 as test, '${DATABASE}' as database_name;"`);
            console.log('‚úÖ Test de connexion r√©ussi!');
        } catch (error) {
            console.log('‚ùå Test de connexion √©chou√©:', error.message);
            throw error;
        }

        // 7. Mettre √† jour le fichier .env.mariadb
        console.log('üìù Mise √† jour du fichier .env.mariadb...');
        const envPath = path.join(__dirname, '.env.mariadb');
        
        const envContent = `# Configuration MariaDB pour Fusepoint Platform
# G√©n√©r√© automatiquement le ${new Date().toISOString()}

# Base de donn√©es
DB_TYPE=mariadb
MARIADB_HOST=localhost
MARIADB_PORT=3306
MARIADB_USER=${USERNAME}
MARIADB_PASSWORD=${PASSWORD}
MARIADB_DATABASE=${DATABASE}

# Cl√© de chiffrement (g√©n√©rez une nouvelle cl√© pour la production)
DB_ENCRYPTION_KEY=7e0a674a182ed91fbd64b950bf0b022ad8e1d61096c60e8636e140bedad4bb0d

# Configuration existante (√† copier depuis votre .env actuel)
# JWT_SECRET=votre_jwt_secret
# SMTP_HOST=votre_smtp_host
# SMTP_PORT=587
# SMTP_USER=votre_smtp_user
# SMTP_PASS=votre_smtp_pass
# etc...
`;
        
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Fichier .env.mariadb mis √† jour');
        
        console.log('');
        console.log('üéâ MariaDB configur√© avec succ√®s!');
        console.log('üìã Informations de connexion:');
        console.log(`   Utilisateur: ${USERNAME}`);
        console.log(`   Mot de passe: ${PASSWORD}`);
        console.log(`   Base de donn√©es: ${DATABASE}`);
        console.log(`   Host: localhost`);
        console.log(`   Port: 3306`);
        console.log('');
        console.log('üìù Prochaines √©tapes:');
        console.log('   1. Tester la connexion: node test-mariadb-connection.js');
        console.log('   2. Ex√©cuter la migration: node migrate-database.js');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©paration:', error.message);
        console.log('');
        console.log('üîß Solution manuelle:');
        console.log('1. Arr√™ter MariaDB: brew services stop mariadb');
        console.log('2. Supprimer les donn√©es: sudo rm -rf /opt/homebrew/var/mysql');
        console.log('3. D√©sinstaller: brew uninstall mariadb');
        console.log('4. R√©installer: brew install mariadb');
        console.log('5. D√©marrer: brew services start mariadb');
        console.log('6. Configurer manuellement avec les commandes SQL');
        process.exit(1);
    }
}

fixMariaDBComplete();
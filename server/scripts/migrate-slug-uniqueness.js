#!/usr/bin/env node

/**
 * Script de migration pour modifier la contrainte d'unicit√© des slugs
 * Permet aux slugs d'√™tre uniques par entreprise plut√¥t que globalement
 */

const databaseService = require('../services/databaseService');

async function migrateSlugUniqueness() {
  console.log('üîÑ D√©but de la migration des contraintes de slugs...');
  
  try {
    // Obtenir une connexion directe
    const connection = await databaseService.getConnection();
    
    console.log('üìä V√©rification de la contrainte actuelle...');
    
    // V√©rifier si la contrainte UNIQUE existe d√©j√†
    const [constraints] = await connection.execute(`
      SELECT CONSTRAINT_NAME, COLUMN_NAME 
      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
      WHERE TABLE_SCHEMA = DATABASE() 
      AND TABLE_NAME = 'linkpoints' 
      AND COLUMN_NAME = 'slug'
      AND CONSTRAINT_NAME != 'PRIMARY'
    `);
    
    if (constraints.length > 0) {
      console.log('üóëÔ∏è Suppression de l\'ancienne contrainte UNIQUE sur slug...');
      await connection.execute(`ALTER TABLE linkpoints DROP INDEX ${constraints[0].CONSTRAINT_NAME}`);
      console.log('‚úÖ Ancienne contrainte supprim√©e');
    } else {
      console.log('‚ÑπÔ∏è Aucune contrainte UNIQUE existante trouv√©e sur slug');
    }
    
    // V√©rifier s'il y a des doublons qui pourraient poser probl√®me
    console.log('üîç V√©rification des doublons potentiels...');
    const [duplicates] = await connection.execute(`
      SELECT slug, company_id, COUNT(*) as count
      FROM linkpoints 
      WHERE company_id IS NOT NULL
      GROUP BY slug, company_id 
      HAVING COUNT(*) > 1
    `);
    
    if (duplicates.length > 0) {
      console.log('‚ö†Ô∏è Doublons d√©tect√©s dans la m√™me entreprise:');
      duplicates.forEach(dup => {
        console.log(`  - Slug "${dup.slug}" dans l'entreprise ${dup.company_id}: ${dup.count} occurrences`);
      });
      
      // R√©soudre les doublons en ajoutant un suffixe
      for (const dup of duplicates) {
        console.log(`üîß R√©solution des doublons pour "${dup.slug}" dans l'entreprise ${dup.company_id}...`);
        
        const [linkpoints] = await connection.execute(`
          SELECT id, slug FROM linkpoints 
          WHERE slug = ? AND company_id = ? 
          ORDER BY created_at ASC
        `, [dup.slug, dup.company_id]);
        
        // Garder le premier, renommer les autres
        for (let i = 1; i < linkpoints.length; i++) {
          const newSlug = `${dup.slug}-${i}`;
          await connection.execute(`
            UPDATE linkpoints SET slug = ? WHERE id = ?
          `, [newSlug, linkpoints[i].id]);
          console.log(`  ‚úÖ Renomm√© linkpoint ${linkpoints[i].id}: "${dup.slug}" ‚Üí "${newSlug}"`);
        }
      }
    } else {
      console.log('‚úÖ Aucun doublon d√©tect√© dans les entreprises');
    }
    
    // Cr√©er la nouvelle contrainte UNIQUE composite
    console.log('üîß Cr√©ation de la nouvelle contrainte UNIQUE (slug, company_id)...');
    await connection.execute(`
      ALTER TABLE linkpoints 
      ADD CONSTRAINT unique_slug_per_company 
      UNIQUE (slug, company_id)
    `);
    console.log('‚úÖ Nouvelle contrainte cr√©√©e avec succ√®s');
    
    // V√©rifier la nouvelle contrainte
    const [newConstraints] = await connection.execute(`
      SELECT CONSTRAINT_NAME, COLUMN_NAME 
      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
      WHERE TABLE_SCHEMA = DATABASE() 
      AND TABLE_NAME = 'linkpoints' 
      AND CONSTRAINT_NAME = 'unique_slug_per_company'
    `);
    
    console.log('üìã Nouvelle contrainte v√©rifi√©e:');
    newConstraints.forEach(constraint => {
      console.log(`  - ${constraint.CONSTRAINT_NAME}: ${constraint.COLUMN_NAME}`);
    });
    
    await connection.end();
    console.log('üéâ Migration termin√©e avec succ√®s !');
    console.log('');
    console.log('üìù R√©sum√© des changements:');
    console.log('  - Les slugs peuvent maintenant √™tre identiques entre diff√©rentes entreprises');
    console.log('  - Les slugs restent uniques au sein de chaque entreprise');
    console.log('  - Les doublons existants ont √©t√© r√©solus automatiquement');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration si le script est appel√© directement
if (require.main === module) {
  migrateSlugUniqueness()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { migrateSlugUniqueness };
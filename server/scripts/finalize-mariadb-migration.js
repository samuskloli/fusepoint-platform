#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

/**
 * Script de finalisation de la migration vers MariaDB
 * Supprime les d√©pendances SQLite et nettoie les fichiers obsol√®tes
 */

class MariaDBMigrationFinalizer {
    constructor() {
        this.projectRoot = path.join(__dirname, '..', '..');
        this.serverRoot = path.join(__dirname, '..');
    }

    async finalize() {
        console.log('üîß Finalisation de la migration vers MariaDB...');
        console.log('=' .repeat(60));

        try {
            await this.removeSQLiteDependency();
            await this.cleanupSQLiteFiles();
            await this.createMigrationSummary();
            
            console.log('\n‚úÖ Migration vers MariaDB finalis√©e avec succ√®s!');
            console.log('\nüìã Prochaines √©tapes recommand√©es:');
            console.log('   1. Testez toutes les fonctionnalit√©s de l\'application');
            console.log('   2. V√©rifiez que la base de donn√©es MariaDB fonctionne correctement');
            console.log('   3. Cr√©ez une sauvegarde de la base de donn√©es MariaDB');
            console.log('   4. Supprimez les anciens fichiers SQLite si tout fonctionne');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la finalisation:', error);
            process.exit(1);
        }
    }

    async removeSQLiteDependency() {
        console.log('\nüì¶ Suppression de la d√©pendance SQLite...');
        
        const packagePath = path.join(this.projectRoot, 'package.json');
        
        if (!fs.existsSync(packagePath)) {
            console.log('‚ö†Ô∏è  Fichier package.json non trouv√©');
            return;
        }
        
        const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
        
        // Supprimer sqlite3 des d√©pendances
        if (packageContent.dependencies && packageContent.dependencies.sqlite3) {
            delete packageContent.dependencies.sqlite3;
            console.log('‚úÖ D√©pendance sqlite3 supprim√©e des dependencies');
        }
        
        if (packageContent.devDependencies && packageContent.devDependencies.sqlite3) {
            delete packageContent.devDependencies.sqlite3;
            console.log('‚úÖ D√©pendance sqlite3 supprim√©e des devDependencies');
        }
        
        // Sauvegarder le package.json modifi√©
        fs.writeFileSync(packagePath, JSON.stringify(packageContent, null, 2));
        console.log('‚úÖ Fichier package.json mis √† jour');
        
        // Supprimer sqlite3 des node_modules si pr√©sent
        try {
            await execAsync('npm uninstall sqlite3', { cwd: this.projectRoot });
            console.log('‚úÖ Package sqlite3 d√©sinstall√©');
        } catch (error) {
            console.log('‚ÑπÔ∏è  Package sqlite3 d√©j√† absent des node_modules');
        }
    }

    async cleanupSQLiteFiles() {
        console.log('\nüßπ Nettoyage des fichiers SQLite...');
        
        const filesToCheck = [
            path.join(this.serverRoot, 'fusepoint.db'),
            path.join(this.serverRoot, 'fusepoint.db-shm'),
            path.join(this.serverRoot, 'fusepoint.db-wal'),
            path.join(this.projectRoot, 'fusepoint.db'),
            path.join(this.projectRoot, 'fusepoint.db-shm'),
            path.join(this.projectRoot, 'fusepoint.db-wal')
        ];
        
        let foundFiles = [];
        
        for (const filePath of filesToCheck) {
            if (fs.existsSync(filePath)) {
                foundFiles.push(filePath);
            }
        }
        
        if (foundFiles.length > 0) {
            console.log('\nüìÅ Fichiers SQLite d√©tect√©s:');
            foundFiles.forEach(file => {
                const stats = fs.statSync(file);
                const sizeKB = (stats.size / 1024).toFixed(2);
                console.log(`   ‚Ä¢ ${path.basename(file)} (${sizeKB} KB)`);
            });
            
            console.log('\n‚ö†Ô∏è  IMPORTANT: Ces fichiers SQLite ont √©t√© conserv√©s pour s√©curit√©.');
            console.log('   Vous pouvez les supprimer manuellement apr√®s avoir v√©rifi√© que');
            console.log('   la migration vers MariaDB fonctionne correctement.');
            
            // Cr√©er un script de suppression
            const cleanupScript = foundFiles.map(file => `rm "${file}"`).join('\n');
            const cleanupScriptPath = path.join(this.serverRoot, 'scripts', 'cleanup-sqlite-files.sh');
            
            fs.writeFileSync(cleanupScriptPath, `#!/bin/bash\n\n# Script de suppression des fichiers SQLite\n# Ex√©cutez ce script uniquement apr√®s avoir v√©rifi√© que MariaDB fonctionne\n\n${cleanupScript}\n\necho "Fichiers SQLite supprim√©s"\n`);
            fs.chmodSync(cleanupScriptPath, '755');
            
            console.log(`\nüìù Script de nettoyage cr√©√©: ${cleanupScriptPath}`);
        } else {
            console.log('‚úÖ Aucun fichier SQLite trouv√©');
        }
    }

    async createMigrationSummary() {
        console.log('\nüìä Cr√©ation du r√©sum√© de migration...');
        
        const summaryPath = path.join(this.serverRoot, 'MIGRATION_MARIADB_SUMMARY.md');
        
        const summary = `# R√©sum√© de la Migration vers MariaDB

## Date de migration
${new Date().toISOString()}

## Services migr√©s

Les services suivants ont √©t√© migr√©s de SQLite vers MariaDB :

### ‚úÖ Services compl√®tement migr√©s
- **accompagnementService.js** - Gestion des prestations et demandes
- **agentService.js** - Gestion des agents
- **backupService.js** - Syst√®me de sauvegarde
- **bulkEmailService.js** - Envoi d'emails en masse
- **clientService.js** - Gestion des clients
- **databaseService.js** - Service de base de donn√©es principal
- **mariadbService.js** - Service MariaDB sp√©cialis√©
- **notificationManagementService.js** - Gestion des notifications
- **permissionsService.js** - Gestion des permissions
- **platformSettingsService.js** - Param√®tres de la plateforme
- **prestataireInvitationService.js** - Invitations des prestataires
- **projectService.js** - Gestion des projets
- **systemHealthService.js** - Sant√© du syst√®me
- **systemLogsService.js** - Journalisation syst√®me

## Modifications apport√©es

### 1. Remplacement des imports
- \`require('sqlite3')\` ‚Üí \`MariaDBService\`
- Suppression des r√©f√©rences directes √† \`fusepoint.db\`

### 2. Adaptation des m√©thodes
- \`.lastID\` ‚Üí \`.insertId\`
- \`.changes\` ‚Üí \`.affectedRows\`
- \`datetime('now')\` ‚Üí \`NOW()\`

### 3. Configuration
- Ajout des variables d'environnement MariaDB dans \`.env.mariadb\`
- Configuration de la connexion MariaDB

### 4. Sch√©mas de base de donn√©es
- Adaptation des types de donn√©es SQLite vers MariaDB
- Conversion des contraintes et index

## Configuration MariaDB

### Variables d'environnement (\`.env.mariadb\`)
\`\`\`
DB_TYPE=mariadb
DB_HOST=localhost
DB_PORT=3306
DB_USER=oliveirasamuel
DB_PASSWORD=FusepointDB2025!
DB_NAME=fusepoint_db
\`\`\`

### D√©pendances
- **Ajout√©e**: \`mysql2\` pour la connexion MariaDB
- **Supprim√©e**: \`sqlite3\` (ancienne d√©pendance)

## Scripts de v√©rification

- \`verify-mariadb-migration.js\` - V√©rification de la migration
- \`finalize-mariadb-migration.js\` - Finalisation de la migration
- \`cleanup-sqlite-files.sh\` - Nettoyage des fichiers SQLite (optionnel)

## Tests recommand√©s

1. **Test de connexion** - V√©rifier que l'application se connecte √† MariaDB
2. **Test CRUD** - Tester les op√©rations de cr√©ation, lecture, mise √† jour, suppression
3. **Test des services** - V√©rifier chaque service migr√©
4. **Test de performance** - Comparer les performances avec SQLite
5. **Test de sauvegarde** - V√©rifier le syst√®me de sauvegarde MariaDB

## Notes importantes

- ‚ö†Ô∏è  **Sauvegarde**: Assurez-vous d'avoir une sauvegarde compl√®te avant de supprimer les fichiers SQLite
- üîí **S√©curit√©**: Les mots de passe MariaDB doivent √™tre s√©curis√©s en production
- üìà **Performance**: MariaDB offre de meilleures performances pour les applications multi-utilisateurs
- üîÑ **Maintenance**: Planifiez des sauvegardes r√©guli√®res de MariaDB

## Support

En cas de probl√®me, consultez :
1. Les logs de l'application
2. Les logs MariaDB
3. Le script de v√©rification \`verify-mariadb-migration.js\`

---
*Migration g√©n√©r√©e automatiquement le ${new Date().toLocaleString('fr-FR')}*
`;
        
        fs.writeFileSync(summaryPath, summary);
        console.log(`‚úÖ R√©sum√© de migration cr√©√©: ${summaryPath}`);
    }
}

// Ex√©cution du script
if (require.main === module) {
    const finalizer = new MariaDBMigrationFinalizer();
    finalizer.finalize();
}

module.exports = MariaDBMigrationFinalizer;
#!/usr/bin/env node
/**
 * Script d'installation et configuration MariaDB
 * Fusepoint Platform - Migration SQLite vers MariaDB
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

class MariaDBSetup {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  /**
   * Poser une question √† l'utilisateur
   */
  question(query) {
    return new Promise(resolve => {
      this.rl.question(query, resolve);
    });
  }

  /**
   * Ex√©cuter une commande shell
   */
  execCommand(command, options = {}) {
    try {
      console.log(`üîß Ex√©cution: ${command}`);
      const result = execSync(command, { 
        encoding: 'utf8', 
        stdio: 'inherit',
        ...options 
      });
      return result;
    } catch (error) {
      console.error(`‚ùå Erreur commande: ${command}`);
      console.error(error.message);
      throw error;
    }
  }

  /**
   * V√©rifier si MariaDB est install√©
   */
  checkMariaDBInstallation() {
    try {
      this.execCommand('which mariadb', { stdio: 'pipe' });
      console.log('‚úÖ MariaDB est install√©');
      return true;
    } catch (error) {
      console.log('‚ùå MariaDB n\'est pas install√©');
      return false;
    }
  }

  /**
   * Installer MariaDB via Homebrew
   */
  async installMariaDB() {
    try {
      console.log('üì¶ Installation de MariaDB via Homebrew...');
      
      // V√©rifier si Homebrew est install√©
      try {
        this.execCommand('which brew', { stdio: 'pipe' });
      } catch (error) {
        console.error('‚ùå Homebrew n\'est pas install√©. Veuillez l\'installer d\'abord.');
        console.log('Visitez: https://brew.sh/');
        throw error;
      }

      // Installer MariaDB
      this.execCommand('brew install mariadb');
      
      console.log('‚úÖ MariaDB install√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur installation MariaDB:', error.message);
      throw error;
    }
  }

  /**
   * Initialiser MariaDB
   */
  async initializeMariaDB() {
    try {
      console.log('üîß Initialisation de MariaDB...');
      
      // Arr√™ter le service s'il est en cours
      try {
        this.execCommand('brew services stop mariadb');
      } catch (error) {
        console.log('‚ÑπÔ∏è Service MariaDB n\'√©tait pas d√©marr√©');
      }

      // Initialiser la base de donn√©es
      this.execCommand('mariadb-install-db');
      
      // D√©marrer le service
      this.execCommand('brew services start mariadb');
      
      console.log('‚úÖ MariaDB initialis√© et d√©marr√©');
      
      // Attendre que le service soit pr√™t
      console.log('‚è≥ Attente du d√©marrage du service...');
      await this.sleep(3000);
      
    } catch (error) {
      console.error('‚ùå Erreur initialisation MariaDB:', error.message);
      throw error;
    }
  }

  /**
   * Cr√©er la base de donn√©es Fusepoint
   */
  async createDatabase() {
    try {
      console.log('üóÑÔ∏è Cr√©ation de la base de donn√©es fusepoint_db...');
      
      // Se connecter √† MariaDB et cr√©er la base
      const createDbCommand = `mariadb -u ${process.env.USER || 'root'} -e "CREATE DATABASE IF NOT EXISTS fusepoint_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"`;
      
      this.execCommand(createDbCommand);
      
      console.log('‚úÖ Base de donn√©es fusepoint_db cr√©√©e');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation base de donn√©es:', error.message);
      throw error;
    }
  }

  /**
   * Cr√©er le fichier .env pour MariaDB
   */
  async createEnvFile() {
    try {
      const envPath = path.join(__dirname, '../.env.mariadb');
      
      const envContent = `# Configuration MariaDB pour Fusepoint Platform
# G√©n√©r√© automatiquement le ${new Date().toISOString()}

# Base de donn√©es
DB_TYPE=mariadb
MARIADB_HOST=localhost
MARIADB_PORT=3306
MARIADB_USER=${process.env.USER || 'root'}
MARIADB_PASSWORD=
MARIADB_DATABASE=fusepoint_db

# Cl√© de chiffrement (g√©n√©rez une nouvelle cl√© pour la production)
DB_ENCRYPTION_KEY=${require('crypto').randomBytes(32).toString('hex')}

# Configuration existante (√† copier depuis votre .env actuel)
# JWT_SECRET=votre_jwt_secret
# SMTP_HOST=votre_smtp_host
# SMTP_PORT=587
# SMTP_USER=votre_smtp_user
# SMTP_PASS=votre_smtp_pass
# etc...
`;

      fs.writeFileSync(envPath, envContent);
      console.log(`‚úÖ Fichier de configuration cr√©√©: ${envPath}`);
      console.log('üìù N\'oubliez pas de copier vos variables d\'environnement existantes!');
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation fichier .env:', error.message);
      throw error;
    }
  }

  /**
   * Tester la connexion MariaDB
   */
  async testConnection() {
    try {
      console.log('üîç Test de connexion √† MariaDB...');
      
      const testCommand = `mariadb -u ${process.env.USER || 'root'} fusepoint_db -e "SELECT 1 as test;"`;
      this.execCommand(testCommand);
      
      console.log('‚úÖ Connexion MariaDB r√©ussie');
      return true;
    } catch (error) {
      console.error('‚ùå Test de connexion √©chou√©:', error.message);
      return false;
    }
  }

  /**
   * Ex√©cuter la migration
   */
  async runMigration() {
    try {
      console.log('üöÄ Pr√©paration de la migration SQLite vers MariaDB...');
      
      // Charger les variables d'environnement MariaDB
      const envPath = path.join(__dirname, '../.env.mariadb');
      if (fs.existsSync(envPath)) {
        require('dotenv').config({ path: envPath });
      }
      
      console.log('üìã Pour ex√©cuter la migration, utilisez:');
      console.log('   cd server && node scripts/migrate-sqlite-to-mariadb.js');
      console.log('üìã Pour tester la migration, utilisez:');
      console.log('   cd server && node scripts/test-mariadb-migration.js');
      
      console.log('‚úÖ Configuration pr√™te pour la migration');
    } catch (error) {
      console.error('‚ùå Erreur pr√©paration migration:', error.message);
      throw error;
    }
  }

  /**
   * Fonction utilitaire pour attendre
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Processus d'installation complet
   */
  async setup() {
    try {
      console.log('üöÄ Configuration MariaDB pour Fusepoint Platform');
      console.log('=' .repeat(60));
      
      // 1. V√©rifier l'installation MariaDB
      if (!this.checkMariaDBInstallation()) {
        const install = await this.question('MariaDB n\'est pas install√©. Voulez-vous l\'installer ? (y/N): ');
        if (install.toLowerCase() === 'y' || install.toLowerCase() === 'yes') {
          await this.installMariaDB();
        } else {
          console.log('‚ùå Installation annul√©e');
          return;
        }
      }
      
      // 2. Initialiser MariaDB
      const init = await this.question('Voulez-vous initialiser/red√©marrer MariaDB ? (Y/n): ');
      if (init.toLowerCase() !== 'n' && init.toLowerCase() !== 'no') {
        await this.initializeMariaDB();
      }
      
      // 3. Cr√©er la base de donn√©es
      await this.createDatabase();
      
      // 4. Tester la connexion
      const connectionOk = await this.testConnection();
      if (!connectionOk) {
        console.error('‚ùå Impossible de se connecter √† MariaDB');
        return;
      }
      
      // 5. Cr√©er le fichier de configuration
      await this.createEnvFile();
      
      // 6. Pr√©parer la migration
      await this.runMigration();
      
      console.log('\nüéâ Configuration MariaDB termin√©e avec succ√®s!');
      console.log('=' .repeat(60));
      console.log('üìã Prochaines √©tapes:');
      console.log('1. Copiez vos variables d\'environnement dans .env.mariadb');
      console.log('2. Modifiez votre application pour utiliser MariaDBService');
      console.log('3. Testez votre application avec la nouvelle base de donn√©es');
      console.log('4. Une fois valid√©, vous pouvez supprimer l\'ancienne base SQLite');
      
    } catch (error) {
      console.error('‚ùå Erreur configuration:', error.message);
    } finally {
      this.rl.close();
    }
  }
}

// Ex√©cuter le setup si le script est appel√© directement
if (require.main === module) {
  const setup = new MariaDBSetup();
  setup.setup();
}

module.exports = MariaDBSetup;
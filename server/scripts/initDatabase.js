const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

/**
 * Script d'initialisation de la base de donn√©es
 */
async function initializeDatabase() {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es...');
    
    // Chemin vers la base de donn√©es
    const dbPath = path.join(__dirname, '..', 'database', 'fusepoint.db');
    const schemaPath = path.join(__dirname, '..', 'database', 'schema.sql');
    
    // Cr√©er le r√©pertoire database s'il n'existe pas
    const dbDir = path.dirname(dbPath);
    if (!fs.existsSync(dbDir)) {
      fs.mkdirSync(dbDir, { recursive: true });
      console.log('üìÅ R√©pertoire database cr√©√©');
    }
    
    // Lire le fichier SQL
    if (!fs.existsSync(schemaPath)) {
      console.error('‚ùå Fichier schema.sql non trouv√©:', schemaPath);
      process.exit(1);
    }
    
    const sqlContent = fs.readFileSync(schemaPath, 'utf8');
    console.log('üìÑ Fichier schema.sql lu avec succ√®s');
    
    // Cr√©er la base de donn√©es
    const db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('‚ùå Erreur cr√©ation base de donn√©es:', err);
        process.exit(1);
      }
      console.log('‚úÖ Base de donn√©es cr√©√©e/ouverte:', dbPath);
    });
    
    // Ex√©cuter le script SQL
    return new Promise((resolve, reject) => {
      db.exec(sqlContent, (err) => {
        if (err) {
          console.error('‚ùå Erreur ex√©cution SQL:', err);
          reject(err);
        } else {
          console.log('‚úÖ Tables cr√©√©es et donn√©es de test ins√©r√©es');
          
          // V√©rifier les tables cr√©√©es
          db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, tables) => {
            if (err) {
              console.error('‚ùå Erreur v√©rification tables:', err);
            } else {
              console.log('üìã Tables cr√©√©es:', tables.map(t => t.name).join(', '));
            }
            
            db.close((err) => {
              if (err) {
                console.error('‚ùå Erreur fermeture base de donn√©es:', err);
                reject(err);
              } else {
                console.log('‚úÖ Base de donn√©es ferm√©e');
                resolve();
              }
            });
          });
        }
      });
    });
    
  } catch (error) {
    console.error('‚ùå Erreur initialisation:', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  initializeDatabase()
    .then(() => {
      console.log('üéâ Initialisation termin√©e avec succ√®s!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå √âchec initialisation:', error);
      process.exit(1);
    });
}

module.exports = { initializeDatabase };
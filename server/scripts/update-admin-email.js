#!/usr/bin/env node

const path = require('path');
// Charger l'env depuis la racine et le dossier server
try {
  require('dotenv').config({ path: path.resolve(__dirname, '..', '..', '.env') });
  require('dotenv').config({ path: path.resolve(__dirname, '..', '.env') });
} catch (_) {}

const databaseService = require('../services/databaseService');

(async () => {
  const oldEmail = 'admin@fusepoint.com';
  const newEmail = 'info@fusepoint.ch';
  const updatedBy = null; // ID de l'utilisateur effectuant la modif si disponible

  try {
    console.log('üîß Mise √† jour du super administrateur dans la base de donn√©es...');
    await databaseService.initialize();

    // R√©cup√©rer l'utilisateur existant avec l'ancien email et avec le nouvel email
    const oldUser = await databaseService.getUserByEmail(oldEmail, false);
    const existingNew = await databaseService.getUserByEmail(newEmail, false);

    if (!oldUser && !existingNew) {
      console.log('‚ö†Ô∏è Aucun utilisateur trouv√© avec admin@fusepoint.com et info@fusepoint.ch. Rien √† mettre √† jour.');
      await databaseService.close();
      process.exit(0);
    }

    if (existingNew && oldUser && existingNew.id !== oldUser.id) {
      console.error(`‚ùå L'email ${newEmail} est d√©j√† utilis√© par un autre utilisateur (ID=${existingNew.id}). Abandon.`);
      await databaseService.close();
      process.exit(1);
    }

    const targetUserId = oldUser ? oldUser.id : existingNew.id;

    // Mettre √† jour l'email si n√©cessaire
    if (oldUser && oldUser.email !== newEmail) {
      await databaseService.updateUser(targetUserId, { email: newEmail }, updatedBy);
      console.log(`‚úÖ Email mis √† jour: ${oldEmail} -> ${newEmail}`);
    } else {
      console.log(`‚ÑπÔ∏è Email d√©j√† configur√© sur ${newEmail}`);
    }

    // Forcer le r√¥le super_admin
    await databaseService.updateUserRole(targetUserId, 'super_admin', updatedBy);
    console.log('‚úÖ R√¥le mis √† jour: super_admin');

    // Forcer le statut actif
    await databaseService.updateUserStatus(targetUserId, true, updatedBy);
    console.log('‚úÖ Statut mis √† jour: actif');

    // Afficher le r√©sum√©
    const user = await databaseService.getUserById(targetUserId);
    console.log('üìÑ R√©sum√© utilisateur:', {
      id: user.id,
      email: user.email,
      role: user.role,
      is_active: user.is_active,
    });

    await databaseService.close();
    console.log('‚úÖ Mise √† jour termin√©e.');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå Erreur lors de la mise √† jour du super admin:', err.message || err);
    try { await databaseService.close(); } catch (_) {}
    process.exit(1);
  }
})();
#!/usr/bin/env node

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

const PASSWORD = 'FusepointDB2025!';
const USERNAME = 'oliveirasamuel';
const DATABASE = 'fusepoint_db';

async function simpleTest() {
    console.log('üß™ Test simple de connexion MariaDB...');
    console.log('');

    try {
        // Test 1: Connexion simple
        console.log('1Ô∏è‚É£ Test de connexion simple...');
        const result1 = await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -e "SELECT 1 as test;"`);
        console.log('‚úÖ Connexion simple r√©ussie');
        console.log('R√©sultat:', result1.stdout.trim());
        console.log('');

        // Test 2: Test avec la base de donn√©es
        console.log('2Ô∏è‚É£ Test avec la base de donn√©es...');
        const result2 = await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -D ${DATABASE} -e "SELECT DATABASE() as current_db;"`);
        console.log('‚úÖ Test avec base de donn√©es r√©ussi');
        console.log('R√©sultat:', result2.stdout.trim());
        console.log('');

        // Test 3: V√©rifier les privil√®ges
        console.log('3Ô∏è‚É£ Test des privil√®ges...');
        const result3 = await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -e "SHOW GRANTS FOR CURRENT_USER();"`);
        console.log('‚úÖ Test des privil√®ges r√©ussi');
        console.log('Privil√®ges:', result3.stdout.trim());
        console.log('');

        // Test 4: Cr√©er une table de test
        console.log('4Ô∏è‚É£ Test de cr√©ation de table...');
        await execAsync(`mariadb -u ${USERNAME} -p${PASSWORD} -D ${DATABASE} -e "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(50)); INSERT INTO test_table (id, name) VALUES (1, 'test') ON DUPLICATE KEY UPDATE name='test'; SELECT * FROM test_table WHERE id=1;"`);
        console.log('‚úÖ Test de cr√©ation de table r√©ussi');
        console.log('');

        console.log('üéâ Tous les tests sont pass√©s!');
        console.log('üìù MariaDB est correctement configur√© et fonctionnel.');
        console.log('');
        console.log('üîß Le probl√®me semble venir du driver Node.js mariadb.');
        console.log('üí° Solutions possibles:');
        console.log('   1. R√©installer le module: npm uninstall mariadb && npm install mariadb');
        console.log('   2. Utiliser mysql2 √† la place: npm install mysql2');
        console.log('   3. V√©rifier la version de Node.js et du driver');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        console.log('');
        console.log('üîç Diagnostic:');
        
        // Diagnostic d√©taill√©
        try {
            console.log('üìä Statut de MariaDB:');
            const status = await execAsync('brew services list | grep mariadb');
            console.log(status.stdout.trim());
        } catch (statusError) {
            console.log('‚ùå Impossible de v√©rifier le statut');
        }
        
        try {
            console.log('üë• Utilisateurs MariaDB:');
            const users = await execAsync('mariadb -u root -e "SELECT User, Host FROM mysql.user WHERE User LIKE \'%oliv%\' OR User = \'oliveirasamuel\';"');
            console.log(users.stdout.trim());
        } catch (usersError) {
            console.log('‚ùå Impossible de lister les utilisateurs');
        }
        
        process.exit(1);
    }
}

simpleTest();
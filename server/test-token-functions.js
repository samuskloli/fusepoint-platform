const MariaDBService = require('./services/mariadbService');

/**
 * Script de test pour v√©rifier les fonctions de gestion des tokens
 */
async function testTokenFunctions() {
  const mariadbService = new MariaDBService();
  
  try {
    console.log('üîÑ Initialisation de la connexion MariaDB...');
    await mariadbService.initialize();
    console.log('‚úÖ Connexion √©tablie');
    
    // Test 1: Cr√©er un utilisateur de test
    console.log('\nüìù Test 1: Cr√©ation d\'un utilisateur avec token de confirmation');
    const testEmail = 'test-token@fusepoint.com';
    
    // Supprimer l'utilisateur de test s'il existe
    await mariadbService.run('DELETE FROM users WHERE email = ?', [testEmail]);
    
    const newUser = await mariadbService.createUser({
      email: testEmail,
      password: 'testpassword123',
      firstName: 'Test',
      lastName: 'Token',
      phone: '+33123456789',
      role: 'user'
    });
    
    console.log('‚úÖ Utilisateur cr√©√©:', {
      id: newUser.id,
      email: newUser.email,
      confirmationToken: newUser.confirmationToken ? 'G√©n√©r√©' : 'Manquant'
    });
    
    // Test 2: V√©rifier que les tokens sont bien stock√©s
    console.log('\nüîç Test 2: V√©rification des tokens dans la base de donn√©es');
    const userFromDB = await mariadbService.get(
      'SELECT id, email, confirmation_token, token_expiry, is_active FROM users WHERE email = ?',
      [testEmail]
    );
    
    console.log('üìä Donn√©es utilisateur en base:', {
      id: userFromDB.id,
      email: userFromDB.email,
      confirmationToken: userFromDB.confirmation_token ? 'Pr√©sent' : 'Absent',
      tokenExpiry: userFromDB.token_expiry ? 'D√©fini' : 'Absent',
      isActive: userFromDB.is_active
    });
    
    // Test 3: G√©n√©rer un token de r√©initialisation
    console.log('\nüîë Test 3: G√©n√©ration d\'un token de r√©initialisation');
    const resetResult = await mariadbService.generatePasswordResetToken(testEmail);
    console.log('‚úÖ Token de r√©initialisation:', resetResult.message);
    
    // V√©rifier le token de r√©initialisation
    const userWithResetToken = await mariadbService.get(
      'SELECT reset_token, token_expiry FROM users WHERE email = ?',
      [testEmail]
    );
    
    console.log('üìä Token de r√©initialisation:', {
      resetToken: userWithResetToken.reset_token ? 'Pr√©sent' : 'Absent',
      tokenExpiry: userWithResetToken.token_expiry ? 'D√©fini' : 'Absent'
    });
    
    // Test 4: Confirmer le compte
    console.log('\n‚úÖ Test 4: Confirmation du compte');
    if (userFromDB.confirmation_token) {
      const confirmResult = await mariadbService.confirmUserAccount(userFromDB.confirmation_token);
      console.log('‚úÖ Compte confirm√©:', confirmResult.message);
      
      // V√©rifier que le compte est maintenant actif
      const confirmedUser = await mariadbService.get(
        'SELECT is_active, confirmation_token FROM users WHERE email = ?',
        [testEmail]
      );
      
      console.log('üìä √âtat apr√®s confirmation:', {
        isActive: confirmedUser.is_active,
        confirmationToken: confirmedUser.confirmation_token ? 'Encore pr√©sent' : 'Supprim√©'
      });
    }
    
    // Test 5: R√©initialiser le mot de passe
    console.log('\nüîÑ Test 5: R√©initialisation du mot de passe');
    if (userWithResetToken.reset_token) {
      const resetPasswordResult = await mariadbService.resetPassword(
        userWithResetToken.reset_token,
        'nouveaumotdepasse123'
      );
      console.log('‚úÖ Mot de passe r√©initialis√©:', resetPasswordResult.message);
      
      // V√©rifier que le token a √©t√© supprim√©
      const userAfterReset = await mariadbService.get(
        'SELECT reset_token, token_expiry FROM users WHERE email = ?',
        [testEmail]
      );
      
      console.log('üìä √âtat apr√®s r√©initialisation:', {
        resetToken: userAfterReset.reset_token ? 'Encore pr√©sent' : 'Supprim√©',
        tokenExpiry: userAfterReset.token_expiry ? 'Encore d√©fini' : 'Supprim√©'
      });
    }
    
    // Nettoyer
    console.log('\nüßπ Nettoyage: Suppression de l\'utilisateur de test');
    await mariadbService.run('DELETE FROM users WHERE email = ?', [testEmail]);
    console.log('‚úÖ Utilisateur de test supprim√©');
    
    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s!');
    console.log('\nüìã R√©sum√© des fonctionnalit√©s test√©es:');
    console.log('   ‚úÖ G√©n√©ration automatique de token de confirmation √† la cr√©ation');
    console.log('   ‚úÖ Stockage des tokens et dates d\'expiration');
    console.log('   ‚úÖ G√©n√©ration de token de r√©initialisation de mot de passe');
    console.log('   ‚úÖ Confirmation de compte avec suppression du token');
    console.log('   ‚úÖ R√©initialisation de mot de passe avec suppression du token');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await mariadbService.close();
    console.log('üîí Connexion ferm√©e');
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testTokenFunctions();
}

module.exports = testTokenFunctions;
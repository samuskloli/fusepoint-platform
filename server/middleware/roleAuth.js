const jwt = require('jsonwebtoken');

/**
 * Middleware pour v√©rifier les r√¥les d'utilisateur
 * @param {Array} allowedRoles - R√¥les autoris√©s pour acc√©der √† la route
 */
const roleAuth = (allowedRoles = []) => {
  return (req, res, next) => {
    try {
      console.log('üîç Debug roleAuth - req.user:', req.user);
      console.log('üîç Debug roleAuth - allowedRoles:', allowedRoles);
      
      // V√©rifier si l'utilisateur est authentifi√©
      if (!req.user) {
        console.log('‚ùå Pas d\'utilisateur authentifi√©');
        return res.status(401).json({
          success: false,
          message: 'Authentification requise'
        });
      }

      console.log('üîç Debug roleAuth - user role:', req.user.role);
      
      // Les super_admin ont acc√®s √† tout
      if (req.user.role === 'super_admin') {
        console.log('‚úÖ Super Admin - Acc√®s autoris√© √† toutes les routes');
        return next();
      }
      
      // V√©rifier si le r√¥le de l'utilisateur est autoris√©
      if (!allowedRoles.includes(req.user.role)) {
        console.log('‚ùå R√¥le non autoris√©:', req.user.role, 'allowedRoles:', allowedRoles);
        return res.status(403).json({
          success: false,
          message: 'Acc√®s refus√© - Privil√®ges insuffisants'
        });
      }

      console.log('‚úÖ Autorisation accord√©e');
      next();
    } catch (error) {
      console.error('‚ùå Erreur v√©rification r√¥le:', error);
      return res.status(500).json({
        success: false,
        message: 'Erreur serveur lors de la v√©rification des privil√®ges'
      });
    }
  };
};

module.exports = roleAuth;
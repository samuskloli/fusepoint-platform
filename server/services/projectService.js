/**
 * Service de gestion des projets
 * Centralise toute la logique m√©tier li√©e aux projets
 */

const translationService = require('./translationService');
const validationService = require('./validationService');
const databaseService = require('./databaseService');
const systemLogsService = require('./systemLogsService');

class ProjectService {
  /**
   * R√©cup√®re les projets d'un client
   * @param {number} clientId - ID du client
   * @returns {Promise<Array>} Liste des projets
   */
  async getClientProjects(clientId) {
    try {
      systemLogsService.info('R√©cup√©ration des projets du client', 'projects', null, null, { clientId });
      
      const projects = await databaseService.query(
        'SELECT * FROM projects WHERE client_id = ? ORDER BY created_at DESC',
        [clientId]
      );
      
      systemLogsService.info('Projets du client r√©cup√©r√©s avec succ√®s', 'projects', null, null, { 
        clientId, 
        count: projects.length 
      });
      
      return projects;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des projets du client', 'projects', null, null, { 
        clientId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * Cr√©e un nouveau projet pour un client
   * @param {number} clientId - ID du client
   * @param {Object} projectData - Donn√©es du projet
   * @returns {Promise<Object>} Projet cr√©√©
   */
  async createProject(clientId, projectData) {
    try {
      systemLogsService.info('Cr√©ation d\'un nouveau projet', 'projects', null, null, { clientId });
      
      // Validation des donn√©es
      const validation = validationService.validateProjectData(projectData);
      if (!validation.isValid) {
        throw new Error(validation.errors.join(', '));
      }

      // V√©rifier que le client existe et r√©cup√©rer son agent assign√©
      const client = await databaseService.get(
        'SELECT id, agent_id FROM users WHERE id = ? AND role IN ("client", "user")',
        [clientId]
      );
      
      if (!client) {
        throw new Error('Client non trouv√©');
      }

      // R√©cup√©rer l'agent assign√© au client
      const agentId = client.agent_id;

      const projectId = await databaseService.run(
        `INSERT INTO projects (client_id, agent_id, name, description, status, progress, budget, start_date, end_date, created_at)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())`,
        [
          clientId,
          agentId, // Assigner automatiquement l'agent du client au projet
          projectData.name,
          projectData.description || null,
          projectData.status || 'en_cours',
          projectData.progress || 0,
          projectData.budget || null,
          projectData.start_date || null,
          projectData.end_date || null
        ]
      );

      const project = await databaseService.get(
        'SELECT * FROM projects WHERE id = ?',
        [projectId.insertId]
      );

      systemLogsService.info('Projet cr√©√© avec succ√®s', 'projects', null, null, { 
        clientId, 
        agentId,
        projectId: projectId.insertId 
      });
      
      return project;
    } catch (error) {
      systemLogsService.error('Erreur lors de la cr√©ation du projet', 'projects', null, null, { 
        clientId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re tous les projets g√©r√©s par un agent
   * @param {number} agentId - ID de l'agent
   * @returns {Promise<Array>} Liste des projets
   */
  async getAgentProjects(agentId) {
    try {
      systemLogsService.info('R√©cup√©ration des projets de l\'agent', 'projects', null, null, { agentId });
      
      const projects = await databaseService.query(
        `SELECT p.*, u.first_name, u.last_name, u.email as client_email
         FROM projects p
         LEFT JOIN users u ON p.client_id = u.id
         WHERE p.agent_id = ? OR p.client_id IN (
           SELECT ac.client_id FROM agent_clients ac 
           WHERE ac.agent_id = ? AND ac.status = 'active'
         )
         ORDER BY p.created_at DESC`,
        [agentId, agentId]
      );
      
      systemLogsService.info('Projets de l\'agent r√©cup√©r√©s avec succ√®s', 'projects', null, null, { 
        agentId, 
        count: projects.length 
      });
      
      return projects;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des projets de l\'agent', 'projects', null, null, { 
        agentId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re un projet par son ID
   * @param {number} projectId - ID du projet
   * @returns {Promise<Object>} Projet trouv√©
   */
  async getProjectById(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration du projet par ID', 'projects', null, null, { projectId });
      
      const project = await databaseService.getProjectById(projectId);
      
      if (!project) {
        throw new Error('Projet non trouv√©');
      }
      
      systemLogsService.info('Projet r√©cup√©r√© avec succ√®s', 'projects', null, null, { projectId });
      
      return project;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les d√©tails d'un projet
   * @param {number} projectId - ID du projet
   * @returns {Promise<Object>} D√©tails du projet
   */
  async getProjectDetails(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration des d√©tails du projet', 'projects', null, null, { projectId });
      
      const project = await databaseService.getProjectById(projectId);
      
      if (!project) {
        throw new Error('Projet non trouv√©');
      }
      
      systemLogsService.info('D√©tails du projet r√©cup√©r√©s avec succ√®s', 'projects', null, null, { projectId });
      
      return project;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des d√©tails du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les t√¢ches d'un projet
   * @param {number} projectId - ID du projet
   * @returns {Promise<Array>} Liste des t√¢ches
   */
  async getProjectTasks(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration des t√¢ches du projet', 'projects', null, null, { projectId });
      
      const tasks = await databaseService.getProjectTasks(projectId);
      
      systemLogsService.info('T√¢ches du projet r√©cup√©r√©es avec succ√®s', 'projects', null, null, { 
        projectId, 
        count: tasks.length 
      });
      
      return tasks;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des t√¢ches du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les fichiers d'un projet
   * @param {number} projectId - ID du projet
   * @returns {Promise<Array>} Liste des fichiers
   */
  async getProjectFiles(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration des fichiers du projet', 'projects', null, null, { projectId });
      
      const files = await databaseService.getProjectFiles(projectId);
      
      systemLogsService.info('Fichiers du projet r√©cup√©r√©s avec succ√®s', 'projects', null, null, { 
        projectId, 
        count: files.length 
      });
      
      return files;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des fichiers du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les membres de l'√©quipe d'un projet
   * @param {number} projectId - ID du projet
   * @returns {Promise<Array>} Liste des membres
   */
  async getProjectTeamMembers(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration de l\'√©quipe du projet', 'projects', null, null, { projectId });
      
      const members = await databaseService.getProjectTeamMembers(projectId);
      
      systemLogsService.info('√âquipe du projet r√©cup√©r√©e avec succ√®s', 'projects', null, null, { 
        projectId, 
        count: members.length 
      });
      
      return members;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration de l\'√©quipe du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les projets d'un client avec pagination
   * @param {number} clientId - ID du client
   * @param {Object} options - Options de pagination
   * @returns {Promise<Object>} Projets pagin√©s
   */
  async getClientProjectsPaginated(clientId, options = {}) {
    try {
      const { page = 1, limit = 10, status = null } = options;
      const offset = (page - 1) * limit;
      
      console.log('üîç Debug projectService.getClientProjectsPaginated - clientId:', clientId, 'options:', options);
      
      systemLogsService.info('R√©cup√©ration des projets du client avec pagination', 'projects', null, null, { 
        clientId, page, limit 
      });
      
      let query = 'SELECT * FROM projects WHERE client_id = ?';
      let params = [clientId];
      
      if (status) {
        query += ' AND status = ?';
        params.push(status);
      }
      
      query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
      params.push(limit, offset);
      
      console.log('üîç Debug projectService.getClientProjectsPaginated - query:', query, 'params:', params);
      
      const projects = await databaseService.query(query, params);
      console.log('üîç Debug projectService.getClientProjectsPaginated - projects found:', projects.length, 'projects:', projects);
      
      // Compter le total
      let countQuery = 'SELECT COUNT(*) as total FROM projects WHERE client_id = ?';
      let countParams = [clientId];
      
      if (status) {
        countQuery += ' AND status = ?';
        countParams.push(status);
      }
      
      const countResult = await databaseService.get(countQuery, countParams);
      const total = Number(countResult.total); // Convertir BigInt en Number
      console.log('üîç Debug projectService.getClientProjectsPaginated - total count:', total);
      
      systemLogsService.info('Projets du client r√©cup√©r√©s avec pagination', 'projects', null, null, { 
        clientId, 
        count: projects.length,
        total,
        page
      });
      
      return {
        projects,
        pagination: {
          page,
          limit,
          total,
          totalPages: Math.ceil(total / limit)
        }
      };
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des projets du client avec pagination', 'projects', null, null, { 
        clientId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les projets d'un agent avec pagination
   * @param {number} agentId - ID de l'agent
   * @param {Object} filters - Filtres √† appliquer
   * @param {Object} options - Options de pagination
   * @returns {Promise<Object>} Projets pagin√©s
   */
  async getAgentProjectsPaginated(agentId, filters = {}, options = {}) {
    try {
      const { page = 1, limit = 10 } = options;
      const offset = (page - 1) * limit;
      
      systemLogsService.info('R√©cup√©ration des projets de l\'agent avec pagination', 'projects', null, null, { 
        agentId, page, limit 
      });
      
      // V√©rifier le r√¥le de l'utilisateur
      const user = await databaseService.get(
        'SELECT role FROM users WHERE id = ?',
        [agentId]
      );
      
      let query, params;
      
      // Si c'est un super admin ou admin, voir tous les projets
      if (user && (user.role === 'super_admin' || user.role === 'admin')) {
        query = `SELECT p.*, u.first_name, u.last_name, u.email as client_email
                 FROM projects p
                 LEFT JOIN users u ON p.client_id = u.id
                 WHERE 1=1`;
        params = [];
      } else {
        // Pour les agents normaux, utiliser la table agent_clients pour voir tous les projets de leurs clients assign√©s
        query = `SELECT p.*, u.first_name, u.last_name, u.email as client_email
                 FROM projects p
                 LEFT JOIN users u ON p.client_id = u.id
                 WHERE (p.agent_id = ? OR p.client_id IN (
                   SELECT client_id FROM agent_clients 
                   WHERE agent_id = ? AND status = 'active'
                 ))`;
        params = [agentId, agentId];
      }
      
      if (filters.status) {
        query += ' AND p.status = ?';
        params.push(filters.status);
      }
      
      if (filters.clientId) {
        query += ' AND p.client_id = ?';
        params.push(filters.clientId);
      }
      
      query += ' ORDER BY p.created_at DESC LIMIT ? OFFSET ?';
      params.push(limit, offset);
      
      const projects = await databaseService.query(query, params);
      
      // Compter le total
      let countQuery, countParams;
      
      if (user && (user.role === 'super_admin' || user.role === 'admin')) {
        countQuery = `SELECT COUNT(*) as total FROM projects p WHERE 1=1`;
        countParams = [];
      } else {
        countQuery = `SELECT COUNT(*) as total FROM projects p 
                      WHERE (p.agent_id = ? OR p.client_id IN (
                        SELECT client_id FROM agent_clients 
                        WHERE agent_id = ? AND status = 'active'
                      ))`;
        countParams = [agentId, agentId];
      }
      
      if (filters.status) {
        countQuery += ' AND p.status = ?';
        countParams.push(filters.status);
      }
      
      if (filters.clientId) {
        countQuery += ' AND p.client_id = ?';
        countParams.push(filters.clientId);
      }
      
      const countResult = await databaseService.get(countQuery, countParams);
      const total = Number(countResult.total); // Convertir BigInt en Number
      
      systemLogsService.info('Projets de l\'agent r√©cup√©r√©s avec pagination', 'projects', null, null, { 
        agentId, 
        userRole: user?.role,
        count: projects.length,
        total,
        page
      });
      
      return {
        projects,
        pagination: {
          page,
          limit,
          total,
          totalPages: Math.ceil(total / limit)
        }
      };
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des projets de l\'agent avec pagination', 'projects', null, null, { 
        agentId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re les t√¢ches d'un client
   * @param {number} clientId - ID du client
   * @returns {Promise<Array>} Liste des t√¢ches
   */
  async getClientTasks(clientId) {
    try {
      systemLogsService.info('R√©cup√©ration des t√¢ches du client', 'projects', null, null, { clientId });
      
      const tasks = await databaseService.query(
        `SELECT t.*, p.name as project_name
         FROM tasks t
         LEFT JOIN projects p ON t.project_id = p.id
         WHERE p.client_id = ?
         ORDER BY t.created_at DESC`,
        [clientId]
      );
      
      systemLogsService.info('T√¢ches du client r√©cup√©r√©es avec succ√®s', 'projects', null, null, { 
        clientId, 
        count: tasks.length 
      });
      
      return tasks;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des t√¢ches du client', 'projects', null, null, { 
        clientId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * V√©rifie si un projet a des t√¢ches actives
   * @param {number} projectId - ID du projet
   * @returns {Promise<boolean>} True si le projet a des t√¢ches actives
   */
  async hasActiveTasks(projectId) {
    try {
      const activeTasks = await databaseService.get(
        'SELECT COUNT(*) as count FROM tasks WHERE project_id = ? AND status IN ("pending", "in_progress")',
        [projectId]
      );
      
      return Number(activeTasks.count) > 0;
    } catch (error) {
      systemLogsService.error('Erreur lors de la v√©rification des t√¢ches actives', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  async getActiveProjectTasks(projectId) {
    try {
      systemLogsService.info('R√©cup√©ration des t√¢ches actives du projet', 'projects', null, null, { projectId });
      
      const tasks = await databaseService.query(
        'SELECT * FROM tasks WHERE project_id = ? AND status IN ("pending", "in_progress") ORDER BY created_at DESC',
        [projectId]
      );
      
      systemLogsService.info('T√¢ches actives du projet r√©cup√©r√©es avec succ√®s', 'projects', null, null, { 
        projectId, 
        count: tasks.length 
      });
      
      return tasks;
    } catch (error) {
      systemLogsService.error('Erreur lors de la r√©cup√©ration des t√¢ches actives du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }

  /**
   * Supprime un projet
   * @param {number} projectId - ID du projet
   * @returns {Promise<void>}
   */
  async deleteProject(projectId) {
    try {
      systemLogsService.info('Suppression du projet', 'projects', null, null, { projectId });
      
      // V√©rifier que le projet existe avant de le supprimer
      const project = await databaseService.get('SELECT id FROM projects WHERE id = ?', [projectId]);
      if (!project) {
        throw new Error(`Projet avec l'ID ${projectId} non trouv√©`);
      }
      
      // Supprimer d'abord les t√¢ches associ√©es
      const tasksResult = await databaseService.run('DELETE FROM tasks WHERE project_id = ?', [projectId]);
      systemLogsService.info('T√¢ches supprim√©es', 'projects', null, null, { projectId, deletedTasks: tasksResult.changes });
      
      // Supprimer les fichiers associ√©s
      const filesResult = await databaseService.run('DELETE FROM files WHERE project_id = ?', [projectId]);
      systemLogsService.info('Fichiers supprim√©s', 'projects', null, null, { projectId, deletedFiles: filesResult.changes });
      
      // Supprimer les membres de l'√©quipe
      const membersResult = await databaseService.run('DELETE FROM team_members WHERE project_id = ?', [projectId]);
      systemLogsService.info('Membres d\'√©quipe supprim√©s', 'projects', null, null, { projectId, deletedMembers: membersResult.changes });
      
      // Supprimer le projet
      const projectResult = await databaseService.run('DELETE FROM projects WHERE id = ?', [projectId]);
      
      // V√©rifier que le projet a bien √©t√© supprim√©
      if (projectResult.changes === 0) {
        throw new Error(`√âchec de la suppression du projet ${projectId} - aucune ligne affect√©e`);
      }
      
      systemLogsService.info('Projet supprim√© avec succ√®s', 'projects', null, null, { 
        projectId, 
        deletedRows: projectResult.changes 
      });
      
      return {
        success: true,
        deletedRows: projectResult.changes,
        message: `Projet ${projectId} supprim√© avec succ√®s`
      };
    } catch (error) {
      systemLogsService.error('Erreur lors de la suppression du projet', 'projects', null, null, { 
        projectId, 
        error: error.message 
      });
      throw error;
    }
  }
}

module.exports = new ProjectService();
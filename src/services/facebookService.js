/**
 * Service Facebook Marketing API
 * G√®re l'authentification OAuth et la r√©cup√©ration des statistiques Facebook
 */

class FacebookService {
  constructor() {
    // Configuration OAuth Facebook
    this.appId = import.meta.env.VITE_FACEBOOK_APP_ID || '';
    this.appSecret = import.meta.env.VITE_FACEBOOK_APP_SECRET || '';
    this.redirectUri = `${window.location.origin}/oauth/facebook/callback`;
    // Permissions Facebook - Configuration avec permissions avanc√©es
    this.scope = 'email,public_profile,pages_show_list,pages_read_engagement,read_insights,business_management';
    
    // URLs API Facebook Graph
    this.baseUrl = 'https://graph.facebook.com/v18.0';
    this.authUrl = 'https://www.facebook.com/v18.0/dialog/oauth';
    this.tokenUrl = 'https://graph.facebook.com/v18.0/oauth/access_token';
    
    // √âtat de l'utilisateur actuel
    this.currentUser = {
      accessToken: null,
      longLivedToken: null,
      pageTokens: {},
      expiresAt: null,
      userId: null,
      pages: [],
      instagramAccounts: []
    };
    
    // Charger les donn√©es utilisateur depuis le stockage
    this.loadUserData();
  }

  /**
   * Charge les donn√©es utilisateur depuis localStorage
   */
  loadUserData() {
    try {
      const userData = localStorage.getItem('fb_user_data');
      if (userData) {
        this.currentUser = JSON.parse(userData);
      }
    } catch (error) {
      console.error('Erreur lors du chargement des donn√©es Facebook:', error);
      this.resetUserData();
    }
  }

  /**
   * Sauvegarde les donn√©es utilisateur dans localStorage
   */
  saveUserData() {
    try {
      localStorage.setItem('fb_user_data', JSON.stringify(this.currentUser));
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des donn√©es Facebook:', error);
    }
  }

  /**
   * Remet √† z√©ro les donn√©es utilisateur
   */
  resetUserData() {
    this.currentUser = {
      accessToken: null,
      longLivedToken: null,
      pageTokens: {},
      expiresAt: null,
      userId: null,
      pages: [],
      instagramAccounts: []
    };
  }

  /**
   * V√©rifie si l'utilisateur est connect√©
   */
  isConnected() {
    return !!(this.currentUser.accessToken && !this.isTokenExpired());
  }

  /**
   * V√©rifie si le token est expir√©
   */
  isTokenExpired() {
    if (!this.currentUser.expiresAt) return true;
    return Date.now() >= this.currentUser.expiresAt;
  }

  /**
   * G√©n√®re l'URL d'autorisation OAuth
   */
  generateAuthUrl() {
    const state = this.generateState();
    localStorage.setItem('fb_oauth_state', state);

    const params = new URLSearchParams({
      client_id: this.appId,
      redirect_uri: this.redirectUri,
      scope: this.scope,
      response_type: 'code',
      state: state
    });

    return `${this.authUrl}?${params.toString()}`;
  }

  /**
   * G√©n√®re un state pour la s√©curit√© CSRF
   */
  generateState() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }

  /**
   * D√©marre le processus d'authentification
   */
  async authenticate() {
    try {
      if (!this.appId) {
        throw new Error('Facebook App ID non configur√©');
      }

      const authUrl = this.generateAuthUrl();
      window.location.href = authUrl;
      
    } catch (error) {
      console.error('Erreur lors de l\'authentification Facebook:', error);
      throw new Error(`Erreur d'authentification Facebook: ${error.message}`);
    }
  }

  /**
   * Traite la callback OAuth et √©change le code contre des tokens
   */
  async handleOAuthCallback(code, state) {
    try {
      console.log('üîÑ D√©but du traitement de la callback Facebook...');
      
      // V√©rifier le state pour la s√©curit√© CSRF
      const storedState = localStorage.getItem('fb_oauth_state');
      if (state !== storedState) {
        throw new Error('√âtat OAuth invalide');
      }

      // √âchanger le code contre un access token via le backend
      console.log('üîë √âchange du code contre un token...');
      const tokenResponse = await this.exchangeCodeForToken(code);
      
      // Stocker les tokens (le backend retourne d√©j√† un token longue dur√©e)
      this.currentUser.accessToken = tokenResponse.access_token;
      this.currentUser.longLivedToken = tokenResponse.access_token;
      
      // V√©rification et correction de expires_in
      let expiresIn = tokenResponse.expires_in;
      if (!expiresIn || expiresIn <= 0) {
        console.warn('‚ö†Ô∏è expires_in invalide re√ßu du backend:', expiresIn);
        console.log('üîß Application d\'une dur√©e par d√©faut (60 jours) pour token longue dur√©e Facebook');
        expiresIn = 60 * 24 * 60 * 60; // 60 jours en secondes (dur√©e standard Facebook)
      }
      
      this.currentUser.expiresAt = Date.now() + (expiresIn * 1000);
      console.log('‚è∞ Token configur√© avec expiration dans', Math.floor(expiresIn / (24 * 60 * 60)), 'jours');
      
      // Sauvegarder imm√©diatement les tokens pour √©viter les probl√®mes de timing
      this.saveUserData();
      console.log('üíæ Tokens sauvegard√©s');
      
      // V√©rifier que la connexion est maintenant active
      if (!this.isConnected()) {
        throw new Error('√âchec de l\'√©tablissement de la connexion apr√®s l\'obtention du token');
      }
      
      // R√©cup√©rer l'ID utilisateur
      console.log('üë§ R√©cup√©ration de l\'ID utilisateur...');
      this.currentUser.userId = await this.getUserId();
      
      // R√©cup√©rer les pages g√©r√©es
      console.log('üìÑ Chargement des pages...');
      await this.loadUserPages();
      
      // Sauvegarder les donn√©es compl√®tes
      this.saveUserData();
      localStorage.removeItem('fb_oauth_state');
      
      console.log('‚úÖ Callback Facebook trait√©e avec succ√®s');
      
      return {
        success: true,
        user: this.currentUser
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement de la callback Facebook:', error);
      
      // Diagnostic d√©taill√© de l'erreur
      console.error('üîç √âtat du service au moment de l\'erreur:', {
        accessToken: this.currentUser.accessToken ? 'pr√©sent' : 'manquant',
        isConnected: this.isConnected(),
        expiresAt: this.currentUser.expiresAt
      });
      
      // Nettoyer en cas d'erreur
      this.resetUserData();
      localStorage.removeItem('fb_oauth_state');
      
      throw new Error(`Erreur de callback Facebook: ${error.message}`);
    }
  }

  /**
   * √âchange le code d'autorisation contre un access token via le backend
   */
  async exchangeCodeForToken(code) {
    const backendUrl = import.meta.env.VITE_BACKEND_URL || 'http://localhost:3004';
    
    const response = await fetch(`${backendUrl}/api/facebook/oauth/exchange`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        code: code,
        state: localStorage.getItem('fb_oauth_state')
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Erreur lors de l\'√©change du code');
    }

    const data = await response.json();
    return {
      access_token: data.data.accessToken,
      expires_in: data.data.expiresIn
    };
  }

  /**
   * Obtient un token longue dur√©e
   */
  async getLongLivedToken(shortLivedToken) {
    const params = new URLSearchParams({
      grant_type: 'fb_exchange_token',
      client_id: this.appId,
      client_secret: this.appSecret,
      fb_exchange_token: shortLivedToken
    });

    const response = await fetch(`${this.tokenUrl}?${params.toString()}`);
    
    if (!response.ok) {
      throw new Error('Erreur lors de l\'obtention du token longue dur√©e');
    }

    return await response.json();
  }

  /**
   * R√©cup√®re l'ID utilisateur
   */
  async getUserId() {
    const response = await this.makeAuthenticatedRequest('/me?fields=id,name');
    return response.id;
  }

  /**
   * Charge les pages g√©r√©es par l'utilisateur
   */
  async loadUserPages() {
    try {
      console.log('üîÑ Chargement des pages Facebook...');
      const response = await this.makeAuthenticatedRequest('/me/accounts?fields=id,name,access_token,category,instagram_business_account');
      
      this.currentUser.pages = response.data || [];
      console.log(`üìÑ ${this.currentUser.pages.length} page(s) trouv√©e(s)`);
      
      if (this.currentUser.pages.length === 0) {
        console.warn('‚ö†Ô∏è Aucune page Facebook trouv√©e. V√©rifiez:');
        console.warn('   1. Que vous g√©rez des pages Facebook');
        console.warn('   2. Les permissions pages_show_list et business_management');
        console.warn('   3. Que votre app Facebook est configur√©e correctement');
      }
      
      // Stocker les tokens de page
      this.currentUser.pageTokens = {};
      this.currentUser.pages.forEach(page => {
        this.currentUser.pageTokens[page.id] = page.access_token;
        console.log(`‚úÖ Page: ${page.name} (${page.category})`);
      });
      
      // Charger les comptes Instagram associ√©s
      await this.loadInstagramAccounts();
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des pages:', error);
      this.currentUser.pages = [];
      
      // Diagnostic de l'erreur
      if (error.message.includes('permissions')) {
        console.error('üîß Solution: V√©rifiez les permissions Facebook dans votre app');
      } else if (error.message.includes('token')) {
        console.error('üîß Solution: Reconnectez-vous √† Facebook');
      }
    }
  }

  /**
   * Effectue une requ√™te authentifi√©e √† l'API Facebook
   */
  async makeAuthenticatedRequest(endpoint, pageId = null) {
    if (!this.isConnected()) {
      throw new Error('Non connect√© √† Facebook');
    }

    // Utiliser le token de page si sp√©cifi√©, sinon le token utilisateur
    const token = pageId && this.currentUser.pageTokens[pageId] 
      ? this.currentUser.pageTokens[pageId] 
      : this.currentUser.accessToken;

    const url = `${this.baseUrl}${endpoint}${endpoint.includes('?') ? '&' : '?'}access_token=${token}`;
    
    const response = await fetch(url);
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || 'Erreur API Facebook');
    }

    return await response.json();
  }

  /**
   * R√©cup√®re les statistiques d'une page
   */
  async getPageInsights(pageId, period = 'day', since = null, until = null) {
    try {
      // M√©triques de base pour les pages (mises √† jour pour √©viter les m√©triques d√©pr√©ci√©es)
      const metrics = [
        'page_fans',
        'page_impressions_unique',
        'page_total_actions'
      ];
      
      // Construire les param√®tres de date
      let dateParams = '';
      if (since && until) {
        dateParams = `&since=${since}&until=${until}`;
      } else {
        // Par d√©faut, r√©cup√©rer les donn√©es des 30 derniers jours
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(endDate.getDate() - 30);
        dateParams = `&since=${startDate.toISOString().split('T')[0]}&until=${endDate.toISOString().split('T')[0]}`;
      }
      
      const response = await this.makeAuthenticatedRequest(
        `/${pageId}/insights?metric=${metrics.join(',')}&period=${period}${dateParams}`
      );
      
      if (response.data) {
        // Transformer les donn√©es en format plus utilisable
        const insights = {};
        response.data.forEach(metric => {
          const latestValue = metric.values && metric.values.length > 0 
            ? metric.values[metric.values.length - 1].value 
            : 0;
          insights[metric.name] = latestValue;
        });
        
        return {
          success: true,
          data: insights
        };
      }
      
      return {
        success: false,
        error: 'Aucune donn√©e re√ßue',
        data: null
      };
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des insights:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des insights',
        data: null
      };
    }
  }

  /**
   * R√©cup√®re les posts d'une page avec leurs statistiques
   */
  async getPagePosts(pageId, limit = 10) {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/${pageId}/posts?fields=id,message,created_time,story,full_picture,permalink_url&limit=${limit}`
      );
      
      if (response.data) {
        // Charger les insights pour chaque post
        const postsWithInsights = await Promise.all(
          response.data.map(async (post) => {
            try {
              const insights = await this.getPostInsights(post.id);
              return {
                ...post,
                insights: insights.success ? insights.data : null
              };
            } catch (error) {
              console.warn(`Erreur lors du chargement des insights pour le post ${post.id}:`, error);
              return post;
            }
          })
        );
        
        return {
          success: true,
          data: postsWithInsights
        };
      }
      
      return {
        success: false,
        error: 'Aucune donn√©e re√ßue',
        data: []
      };
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des posts:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des posts',
        data: []
      };
    }
  }

  /**
   * R√©cup√®re les statistiques d'un post
   */
  async getPostInsights(postId, pageId) {
    try {
      const metrics = ['post_impressions', 'post_clicks', 'post_reactions_by_type_total'];
      const endpoint = `/${postId}/insights?metric=${metrics.join(',')}`;
      
      const response = await this.makeAuthenticatedRequest(endpoint, pageId);
      
      return response.data;
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des insights de post:', error);
      return null;
    }
  }

  /**
   * D√©connecte l'utilisateur
   */
  async disconnect() {
    try {
      this.resetUserData();
      localStorage.removeItem('fb_user_data');
      localStorage.removeItem('fb_oauth_state');
      
      return { success: true };
      
    } catch (error) {
      console.error('Erreur lors de la d√©connexion Facebook:', error);
      throw new Error(`Erreur de d√©connexion Facebook: ${error.message}`);
    }
  }

  /**
   * R√©cup√®re les pages disponibles
   */
  getAvailablePages() {
    const pages = this.currentUser.pages || [];
    
    if (pages.length === 0) {
      console.warn('‚ö†Ô∏è getAvailablePages(): Aucune page disponible');
      console.warn('üîß Essayez de vous reconnecter √† Facebook ou v√©rifiez vos permissions');
    }
    
    return {
      success: true,
      data: pages
    };
  }

  /**
   * Charge les comptes Instagram associ√©s aux pages Facebook
   */
  async loadInstagramAccounts() {
    try {
      console.log('üì± Chargement des comptes Instagram...');
      this.currentUser.instagramAccounts = [];
      
      if (!this.currentUser.pages || this.currentUser.pages.length === 0) {
        console.warn('‚ö†Ô∏è Aucune page disponible pour charger les comptes Instagram');
        return;
      }
      
      let pagesWithInstagram = 0;
      
      for (const page of this.currentUser.pages) {
        if (page.instagram_business_account) {
          pagesWithInstagram++;
          try {
            const instagramData = await this.makeAuthenticatedRequest(
              `/${page.instagram_business_account.id}?fields=id,username,name,profile_picture_url,followers_count,media_count`,
              page.id
            );
            
            this.currentUser.instagramAccounts.push({
              ...instagramData,
              pageId: page.id,
              pageName: page.name
            });
            
            console.log(`‚úÖ Compte Instagram: @${instagramData.username} (${page.name})`);
          } catch (error) {
            console.warn(`‚ùå Impossible de charger le compte Instagram pour la page ${page.name}:`, error);
          }
        }
      }
      
      console.log(`üì± ${this.currentUser.instagramAccounts.length} compte(s) Instagram charg√©(s)`);
      
      if (pagesWithInstagram === 0) {
        console.warn('‚ö†Ô∏è Aucune page n\'a de compte Instagram Business connect√©.');
        console.warn('üîß Pour connecter Instagram:');
        console.warn('   1. Allez sur votre page Facebook');
        console.warn('   2. Param√®tres > Instagram');
        console.warn('   3. Connectez un compte Instagram Business');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des comptes Instagram:', error);
      this.currentUser.instagramAccounts = [];
    }
  }

  /**
   * R√©cup√®re les m√©triques d'un compte Instagram
   */
  async getInstagramInsights(instagramAccountId, pageId, metrics = ['impressions', 'reach', 'profile_views'], period = 'day', since = null, until = null) {
    try {
      if (!instagramAccountId) {
        throw new Error('ID de compte Instagram requis');
      }

      // D√©finir la p√©riode par d√©faut (30 derniers jours)
      if (!since) {
        const date = new Date();
        date.setDate(date.getDate() - 30);
        since = date.toISOString().split('T')[0];
      }
      
      if (!until) {
        until = new Date().toISOString().split('T')[0];
      }

      const metricsParam = metrics.join(',');
      const endpoint = `/${instagramAccountId}/insights?metric=${metricsParam}&period=${period}&since=${since}&until=${until}`;
      
      const response = await this.makeAuthenticatedRequest(endpoint, pageId);
      
      return {
        success: true,
        data: response.data,
        instagramAccountId: instagramAccountId,
        period: { since, until },
        metrics: metrics
      };
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des insights Instagram:', error);
      throw new Error(`Erreur insights Instagram: ${error.message}`);
    }
  }

  /**
   * R√©cup√®re les posts Instagram d'un compte avec leurs m√©triques
   */
  async getInstagramMedia(instagramAccountId, pageId, limit = 25) {
    try {
      const endpoint = `/${instagramAccountId}/media?fields=id,caption,media_type,media_url,permalink,timestamp,like_count,comments_count&limit=${limit}`;
      const response = await this.makeAuthenticatedRequest(endpoint, pageId);
      
      // R√©cup√©rer les insights pour chaque post
      const mediaWithInsights = await Promise.all(
        response.data.map(async (media) => {
          try {
            const insights = await this.getInstagramMediaInsights(media.id, pageId);
            return { ...media, insights };
          } catch (error) {
            console.warn(`Impossible de r√©cup√©rer les insights pour le media ${media.id}:`, error);
            return { ...media, insights: null };
          }
        })
      );
      
      return {
        success: true,
        data: mediaWithInsights,
        instagramAccountId: instagramAccountId
      };
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des m√©dias Instagram:', error);
      throw new Error(`Erreur m√©dias Instagram: ${error.message}`);
    }
  }

  /**
   * R√©cup√®re les m√©triques d'un post Instagram
   */
  async getInstagramMediaInsights(mediaId, pageId) {
    try {
      const metrics = ['impressions', 'reach', 'engagement'];
      const endpoint = `/${mediaId}/insights?metric=${metrics.join(',')}`;
      
      const response = await this.makeAuthenticatedRequest(endpoint, pageId);
      
      return response.data;
      
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des insights de m√©dia Instagram:', error);
      return null;
    }
  }

  /**
   * R√©cup√®re les comptes Instagram disponibles
   */
  getAvailableInstagramAccounts() {
    const accounts = this.currentUser.instagramAccounts || [];
    
    if (accounts.length === 0) {
      console.warn('‚ö†Ô∏è getAvailableInstagramAccounts(): Aucun compte Instagram disponible');
      console.warn('üîß V√©rifiez que vos pages Facebook ont des comptes Instagram Business connect√©s');
    }
    
    return {
      success: true,
      data: accounts
    };
  }

  /**
   * M√©thode de diagnostic pour v√©rifier l'√©tat du service Facebook
   * @returns {Object} Rapport de diagnostic d√©taill√©
   */
  getDiagnosticReport() {
    const report = {
      timestamp: new Date().toISOString(),
      isConnected: this.isConnected(),
      hasValidToken: !!this.currentUser.accessToken,
      tokenExpired: this.isTokenExpired(),
      userId: this.currentUser.userId,
      pagesCount: (this.currentUser.pages || []).length,
      instagramAccountsCount: (this.currentUser.instagramAccounts || []).length,
      pages: [],
      instagramAccounts: [],
      issues: [],
      suggestions: []
    };

    // Analyser les pages
    if (this.currentUser.pages) {
      report.pages = this.currentUser.pages.map(page => ({
        id: page.id,
        name: page.name,
        category: page.category,
        hasToken: !!page.access_token,
        hasInstagram: !!page.instagram_business_account
      }));
    }

    // Analyser les comptes Instagram
    if (this.currentUser.instagramAccounts) {
      report.instagramAccounts = this.currentUser.instagramAccounts.map(account => ({
        id: account.id,
        username: account.username,
        name: account.name,
        pageId: account.pageId,
        pageName: account.pageName,
        followersCount: account.followers_count
      }));
    }

    // Identifier les probl√®mes
    if (!report.isConnected) {
      report.issues.push('Non connect√© √† Facebook');
      report.suggestions.push('Reconnectez-vous √† Facebook');
    }

    if (report.tokenExpired) {
      report.issues.push('Token Facebook expir√©');
      report.suggestions.push('Reconnectez-vous pour renouveler le token');
    }

    if (report.pagesCount === 0) {
      report.issues.push('Aucune page Facebook trouv√©e');
      report.suggestions.push('V√©rifiez que vous g√©rez des pages Facebook');
      report.suggestions.push('V√©rifiez les permissions pages_show_list et business_management');
    }

    if (report.instagramAccountsCount === 0 && report.pagesCount > 0) {
      report.issues.push('Aucun compte Instagram Business connect√©');
      report.suggestions.push('Connectez des comptes Instagram Business √† vos pages Facebook');
    }

    return report;
  }

  /**
   * Affiche un rapport de diagnostic dans la console
   */
  printDiagnostic() {
    const report = this.getDiagnosticReport();
    
    console.log('\n=== DIAGNOSTIC FACEBOOK SERVICE ===');
    console.log(`üïê Timestamp: ${report.timestamp}`);
    console.log(`üîó Connect√©: ${report.isConnected ? '‚úÖ Oui' : '‚ùå Non'}`);
    console.log(`üé´ Token valide: ${report.hasValidToken && !report.tokenExpired ? '‚úÖ Oui' : '‚ùå Non'}`);
    console.log(`üë§ User ID: ${report.userId || 'Non d√©fini'}`);
    console.log(`üìÑ Pages: ${report.pagesCount}`);
    console.log(`üì± Comptes Instagram: ${report.instagramAccountsCount}`);

    if (report.pages.length > 0) {
      console.log('\nüìÑ D√©tails des pages:');
      report.pages.forEach((page, index) => {
        console.log(`  ${index + 1}. ${page.name} (${page.category})`);
        console.log(`     ID: ${page.id}`);
        console.log(`     Token: ${page.hasToken ? '‚úÖ' : '‚ùå'}`);
        console.log(`     Instagram: ${page.hasInstagram ? '‚úÖ' : '‚ùå'}`);
      });
    }

    if (report.instagramAccounts.length > 0) {
      console.log('\nüì± D√©tails des comptes Instagram:');
      report.instagramAccounts.forEach((account, index) => {
        console.log(`  ${index + 1}. @${account.username} (${account.name})`);
        console.log(`     ID: ${account.id}`);
        console.log(`     Page: ${account.pageName}`);
        console.log(`     Followers: ${account.followersCount || 'N/A'}`);
      });
    }

    if (report.issues.length > 0) {
      console.log('\n‚ö†Ô∏è Probl√®mes d√©tect√©s:');
      report.issues.forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue}`);
      });
    }

    if (report.suggestions.length > 0) {
      console.log('\nüîß Suggestions:');
      report.suggestions.forEach((suggestion, index) => {
        console.log(`  ${index + 1}. ${suggestion}`);
      });
    }

    console.log('\n=== FIN DU DIAGNOSTIC ===\n');
    
    return report;
  }

  /**
   * R√©cup√®re les informations de l'utilisateur connect√©
   */
  getCurrentUser() {
    return {
      isConnected: this.isConnected(),
      userId: this.currentUser.userId,
      pages: this.currentUser.pages,
      instagramAccounts: this.currentUser.instagramAccounts || [],
      expiresAt: this.currentUser.expiresAt
    };
  }

  /**
   * Diagnostic et r√©paration automatique des probl√®mes de pages
   * R√©sout le probl√®me de pages non r√©cup√©r√©es apr√®s connexion
   */
  async diagnosePagesIssue() {
    console.log('üîç DIAGNOSTIC AUTOMATIQUE - Probl√®me de r√©cup√©ration des pages');
    
    const issues = [];
    const solutions = [];
    
    try {
      // 1. V√©rifier la connexion
      if (!this.isConnected()) {
        issues.push('Non connect√© √† Facebook');
        solutions.push('Reconnectez-vous √† Facebook');
        return { issues, solutions, canAutoFix: false };
      }
      
      // 2. V√©rifier les pages en m√©moire
      const pagesInMemory = this.currentUser.pages?.length || 0;
      console.log(`üìÑ Pages en m√©moire: ${pagesInMemory}`);
      
      // 3. Tester l'API directement
      let apiResponse;
      try {
        apiResponse = await this.makeAuthenticatedRequest('/me/accounts?fields=id,name,access_token,category,instagram_business_account');
        console.log(`üåê Pages via API: ${apiResponse.data?.length || 0}`);
      } catch (apiError) {
        issues.push(`Erreur API: ${apiError.message}`);
        if (apiError.message.includes('permissions')) {
          solutions.push('V√©rifiez les permissions pages_show_list et business_management dans votre app Facebook');
        } else if (apiError.message.includes('token')) {
          solutions.push('Token expir√© - reconnectez-vous √† Facebook');
        }
        return { issues, solutions, canAutoFix: false };
      }
      
      // 4. Comparer les donn√©es
      const apiPagesCount = apiResponse.data?.length || 0;
      
      if (apiPagesCount === 0) {
        issues.push('Aucune page trouv√©e via l\'API Facebook');
        solutions.push('V√©rifiez que vous g√©rez des pages Facebook');
        solutions.push('V√©rifiez les permissions de votre app Facebook');
        return { issues, solutions, canAutoFix: false };
      }
      
      if (pagesInMemory !== apiPagesCount) {
        issues.push(`D√©synchronisation: ${pagesInMemory} pages en m√©moire vs ${apiPagesCount} via API`);
        solutions.push('Rechargement automatique des pages');
        
        // Auto-fix: recharger les pages
        console.log('üîß Correction automatique: rechargement des pages...');
        await this.loadUserPages();
        
        const newPagesCount = this.currentUser.pages?.length || 0;
        if (newPagesCount === apiPagesCount) {
          console.log('‚úÖ Probl√®me r√©solu: pages synchronis√©es');
          return { 
            issues: ['D√©synchronisation des pages (r√©solu)'], 
            solutions: ['Pages recharg√©es automatiquement'], 
            canAutoFix: true,
            fixed: true
          };
        }
      }
      
      // 5. V√©rifier les tokens de page
      const pagesWithoutTokens = this.currentUser.pages?.filter(page => !page.access_token) || [];
      if (pagesWithoutTokens.length > 0) {
        issues.push(`${pagesWithoutTokens.length} page(s) sans token d'acc√®s`);
        solutions.push('Probl√®me de configuration de l\'app Facebook');
      }
      
      // 6. V√©rifier les permissions
      try {
        const permissions = await this.makeAuthenticatedRequest('/me/permissions');
        const requiredPerms = ['pages_show_list', 'business_management'];
        const grantedPerms = permissions.data?.filter(p => p.status === 'granted').map(p => p.permission) || [];
        
        const missingPerms = requiredPerms.filter(perm => !grantedPerms.includes(perm));
        if (missingPerms.length > 0) {
          issues.push(`Permissions manquantes: ${missingPerms.join(', ')}`);
          solutions.push('Reconfigurez les permissions dans votre app Facebook');
        }
      } catch (permError) {
        console.warn('Impossible de v√©rifier les permissions:', permError);
      }
      
      if (issues.length === 0) {
        console.log('‚úÖ Aucun probl√®me d√©tect√©');
        return { 
          issues: ['Aucun probl√®me d√©tect√©'], 
          solutions: ['Le syst√®me fonctionne correctement'], 
          canAutoFix: true 
        };
      }
      
      return { issues, solutions, canAutoFix: false };
      
    } catch (error) {
      console.error('Erreur lors du diagnostic:', error);
      return {
        issues: [`Erreur de diagnostic: ${error.message}`],
        solutions: ['Contactez le support technique'],
        canAutoFix: false
      };
    }
  }

  /**
   * Tentative de r√©paration automatique des probl√®mes de pages
   */
  async autoFixPagesIssue() {
    console.log('üîß R√âPARATION AUTOMATIQUE - Probl√®me de pages');
    
    try {
      // 1. Nettoyer les donn√©es corrompues
      console.log('üßπ Nettoyage des donn√©es...');
      this.currentUser.pages = [];
      this.currentUser.pageTokens = {};
      this.currentUser.instagramAccounts = [];
      
      // 2. Recharger les pages
      console.log('üîÑ Rechargement des pages...');
      await this.loadUserPages();
      
      // 3. Sauvegarder
      this.saveUserData();
      
      // 4. V√©rifier le r√©sultat
      const pagesCount = this.currentUser.pages?.length || 0;
      console.log(`‚úÖ R√©paration termin√©e: ${pagesCount} page(s) r√©cup√©r√©e(s)`);
      
      return {
        success: true,
        message: `R√©paration r√©ussie: ${pagesCount} page(s) r√©cup√©r√©e(s)`,
        pagesCount
      };
      
    } catch (error) {
      console.error('‚ùå √âchec de la r√©paration automatique:', error);
      return {
        success: false,
        message: `√âchec de la r√©paration: ${error.message}`,
        error: error.message
      };
    }
  }
}

// Cr√©er une instance unique du service
const facebookService = new FacebookService();

// Exposer le service dans window pour le d√©bogage (uniquement en d√©veloppement)
if (import.meta.env.DEV) {
  window.facebookService = facebookService;
  console.log('üîß Service Facebook expos√© dans window.facebookService pour le d√©bogage');
  console.log('üí° Utilisez window.facebookService.printDiagnostic() pour un diagnostic complet');
}

export default facebookService;